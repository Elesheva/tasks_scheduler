import os
from os.path import lexists

import telebot
from pyexpat.errors import messages
from telebot import types
import create_db
from telegram import Update
from telegram.ext import Updater, CommandHandler, Application, MessageHandler, CallbackContext
from datetime import datetime
import time
import threading
from pytz import utc

from apscheduler.schedulers.background import BackgroundScheduler
import sqlite3
from datetime import datetime, timedelta

bot = telebot.TeleBot('7206218529:AAGXx1IkHVxZ3IrFt09Xgzytanj1n-bpcUI')


# –ü–†–ò–í–ï–¢–°–í–ò–ï –ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
@bot.message_handler(commands=['start'])
def send_welcome(message):
    create_db.create_db()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
    lastname = message.from_user.last_name
    if lastname is None:
        bot.send_message(message.chat.id,
                         f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name} üëã –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–¥–∞—á.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
                         , reply_markup=markup)
    else:
        bot.send_message(message.chat.id,
                         f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name} {lastname} üëã –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–¥–∞—á.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
                         , reply_markup=markup)


@bot.callback_query_handler(func=lambda callback: True)
def registr(callback):
    if callback.data == "registration" or callback.data == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        bot.send_message(callback.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û")
        bot.register_next_step_handler(callback.message, lambda msg: register_name(msg))
    if callback.data == "–ü–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ" or callback.data == "changing_student":
        bot.send_message(callback.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–µ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å")
        bot.register_next_step_handler(callback.message, lambda msg: nomber_change(msg))
    if callback.data == "–ü–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ " or callback.data == "changing_teacher":
        bot.send_message(callback.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–µ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å")
        bot.register_next_step_handler(callback.message, lambda msg: nomber_change_teacher(msg))

    if callback.data == "–ü–æ–º–µ–Ω—è—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã" or callback.data == "changing":
        bot.send_message(callback.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–µ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å")
        bot.register_next_step_handler(callback.message, lambda msg: nomber_change_discepline(msg))
    if callback.data == "–î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É" or callback.data == "add":
        add_data_to_table_discipline(callback.message)

    if callback.data == "–ü–æ–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—É" or callback.data == "changing_group":
        bot.send_message(callback.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–µ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å")
        bot.register_next_step_handler(callback.message, lambda msg: nomber_change_group(msg))
    if callback.data == "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É" or callback.data == "add_group":
        groap_table(callback.message)

    if callback.data == "delete":
        statys = 1
        delete_user(callback.message, callback.message.chat.id, statys)
    if callback.data == "deletee":
        statys = 2
        delete_user(callback.message, callback.message.chat.id, statys)
    if callback.data == "ne_delete":
        return

    if callback.data == "send_completed_task":
        bot.send_message(callback.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:")
        bot.register_next_step_handler(callback.message,
                                       lambda msg: send_task_for_teacher(msg, callback.message.chat.id))

    if callback.data == "statystic":
        bot.send_message(callback.message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:")
        bot.register_next_step_handler(callback.message,
                                       lambda msg: statystics(msg, callback.message.chat.id))
    if callback.data == "send_mark":
        bot.send_message(callback.message.chat.id,
                         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É:")
        bot.register_next_step_handler(callback.message,
                                       lambda msg: send_comment(msg, callback.message.chat.id))

    if callback.data.startswith("neyd"):
        perems_str = callback.data[4:]
        perems = perems_str.split('-')
        mark = 2
        bot.send_message(callback.message.chat.id,
                         "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ:")
        bot.register_next_step_handler(callback.message,
                                       lambda msg: ocenka(msg, callback.message.chat.id, mark, perems[0], perems[1]))
    if callback.data.startswith("ydovletvoritelno"):
        perems_str = callback.data[16:]
        perems = perems_str.split('-')
        mark = 3
        bot.send_message(callback.message.chat.id,
                         "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ:")
        bot.register_next_step_handler(callback.message,
                                       lambda msg: ocenka(msg, callback.message.chat.id, mark, perems[0], perems[1]))
    if callback.data.startswith("horosho"):
        perems_str = callback.data[7:]
        perems = perems_str.split('-')
        mark = 4
        bot.send_message(callback.message.chat.id,
                         "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ:")
        bot.register_next_step_handler(callback.message,
                                       lambda msg: ocenka(msg, callback.message.chat.id, mark, perems[0], perems[1]))
    if callback.data.startswith("otlichno"):
        perems_str = callback.data[8:]
        perems = perems_str.split('-')
        mark = 5
        bot.send_message(callback.message.chat.id,
                         "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ:")
        bot.register_next_step_handler(callback.message,
                                       lambda msg: ocenka(msg, callback.message.chat.id, mark, perems[0], perems[1]))


def register_name(message):
    name = message.text
    bot.send_message(message.chat.id,
                     f"{name}, –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å:\n1. –°—Ç—É–¥–µ–Ω—Ç–æ–º –ú–£–ò–í\n2. –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –ú–£–ò–í\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:")
    bot.register_next_step_handler(message, lambda msg: register_student(msg, name, message.chat.id))


# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –°–¢–£–î–ï–ù–¢–û–í
def register_student(message, name, student_id):
    if message.text == "1":
        # –ü–†–û–í–ï–†–ö–ê –ó–ê–†–ï–ì-–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ò–õ–ò –ù–ï–¢
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (student_id,))
        count = cursor.fetchone()[0]
        if count > 0:
            bot.send_message(message.chat.id, f"{name}, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            changing_student(message, student_id)
        else:
            bot.send_message(message.chat.id,
                             f"{name}, –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å —Å—Ç—É–¥–µ–Ω—Ç–æ–º –ú–£–ò–í, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞—à–µ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")
            bot.register_next_step_handler(message, lambda msg: student_nomber(msg, name, student_id))
    elif message.text == "2":
        print(2)
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (student_id,))
        count = cursor.fetchone()[0]
        if count > 0:
            bot.send_message(message.chat.id, f"{name}, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            changing_teacher(message, student_id)
        else:
            bot.send_message(message.chat.id,
                             f"{name}, –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –ú–£–ò–í, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            bot.register_next_step_handler(message, lambda msg: register_teacher(msg, name, message.chat.id))
    else:
        bot.send_message(message.chat.id,
                         f"{name}, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å:\n1. –°—Ç—É–¥–µ–Ω—Ç–æ–º –ú–£–ò–í\n2. –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –ú–£–ò–í\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:")
        bot.register_next_step_handler(message, lambda msg: register_student(msg, name, student_id))


def student_nomber(message, name, student_id):
    phone_nomber = message.text
    bot.send_message(message.chat.id, f"{name}, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É\n–ü—Ä–∏–º–µ—Ä: plan_it@mail.com")
    bot.register_next_step_handler(message, lambda msg: mail_student(msg, name, student_id, phone_nomber))


def mail_student(message, name, student_id, phone_nomber):
    mail = message.text
    bot.send_message(message.chat.id, f"{name}, –≤–∞—à –ø–æ–ª:\n1. –ú—É–∂—Å–∫–æ–π\n2. –ñ–µ–Ω—Å–∫–∏–π\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É —Å –Ω—É–∂–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º:")
    bot.register_next_step_handler(message, lambda msg: gender_student(msg, name, student_id, phone_nomber, mail))


def gender_student(message, name, student_id, phone_nomber, mail):
    gender = message.text
    if gender == "1" or gender == "2":
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("SELECT id, faculty FROM discipline")
        info_about_faculty = cursor.fetchall()
        connection.commit()
        connection.close()
        output = "".join(
            f"{info_about_faculty[i][0]}) {info_about_faculty[i][1]}\n"
            for i in range(len(info_about_faculty)))
        bot.send_message(message.chat.id, f"{name}, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –§–∞–∫—É–ª—å—Ç–µ—Ç:\n{output} ")
        bot.register_next_step_handler(message,
                                       lambda msg: faculty_student(msg, name, student_id, phone_nomber, mail, gender,
                                                                   info_about_faculty))
    else:
        bot.send_message(message.chat.id,
                         f"{name}, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n–≤–∞—à –ø–æ–ª:\n1. –ú—É–∂—Å–∫–æ–π\n2. –ñ–µ–Ω—Å–∫–∏–π\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É —Å –Ω—É–∂–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º:")
        bot.register_next_step_handler(message, lambda msg: gender_student(msg, name, student_id, phone_nomber, mail))


def faculty_student(message, name, student_id, phone_nomber, mail, gender, info_about_faculty):
    try:
        nomber = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message,
                                       lambda msg: faculty_student(msg, name, student_id, phone_nomber, mail, gender,
                                                                   info_about_faculty))
        return
    have = False
    for i in range(len(info_about_faculty)):
        if info_about_faculty[i][0] == nomber:
            have = True
            faculty = info_about_faculty[i][1]
            bot.send_message(message.chat.id, f"{name}, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å\n–ü—Ä–∏–º–µ—Ä: 1")
            bot.register_next_step_handler(message,
                                           lambda msg: course_student(msg, name, student_id, phone_nomber, mail, gender,
                                                                      faculty))
    if not have:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message,
                                       lambda msg: faculty_student(msg, name, student_id, phone_nomber, mail, gender,
                                                                   info_about_faculty))


def course_student(message, name, student_id, phone_nomber, mail, gender, faculty):
    course = message.text
    if course == "1" or course == "2" or course == "3" or course == "4":
        course = int(message.text)
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("SELECT id, group_number, faculty, course FROM groups WHERE faculty = ? AND course = ? ",
                       (faculty, course))
        info_about_faculty = cursor.fetchall()
        connection.commit()
        connection.close()
        output = "".join(
            f"{info_about_faculty[i][0]}) {info_about_faculty[i][1]}, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {info_about_faculty[i][2]}, –∫—É—Ä—Å: {info_about_faculty[i][3]}\n"
            for i in range(len(info_about_faculty)))
        if info_about_faculty:
            bot.send_message(message.chat.id, f"{name}, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:\n{output} ")
            bot.register_next_step_handler(message,
                                           lambda msg: group_number(msg, name, student_id, phone_nomber, mail, gender,
                                                                    faculty, course, info_about_faculty))
        else:
            bot.send_message(message.chat.id, f"{name}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥—Ä—É–ø–ø–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.")
    else:
        bot.send_message(message.chat.id,
                         f"{name}, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å.\n–ü—Ä–∏–º–µ—Ä: 1")
        bot.register_next_step_handler(message,
                                       lambda msg: course_student(msg, name, student_id, phone_nomber, mail, gender,
                                                                  faculty))


def group_number(message, name, student_id, phone_nomber, mail, gender, faculty, course, info_about_faculty):
    try:
        nomber = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id,
                         f"{name}, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:")
        bot.register_next_step_handler(message,
                                       lambda msg: group_number(msg, name, student_id, phone_nomber, mail, gender,
                                                                faculty, course, info_about_faculty))
        return

    have = False
    for i in range(len(info_about_faculty)):
        if info_about_faculty[i][0] == nomber:
            have = True
            group = info_about_faculty[i][1]
            connection = sqlite3.connect('my_database.db')
            cursor = connection.cursor()
            cursor.execute(
                'INSERT INTO student (student_id, name, phone_number, mail, gender, faculty, course, group_number) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
                (student_id, name, phone_nomber, mail, gender, faculty, course, group))
            connection.commit()
            connection.close()
            bot.send_message(message.chat.id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            changing_student(message, student_id)
    if not have:
        bot.send_message(message.chat.id,
                         f"{name}, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:")
        bot.register_next_step_handler(message,
                                       lambda msg: group_number(msg, name, student_id, phone_nomber, mail, gender,
                                                                faculty, course, info_about_faculty))


# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø
def register_teacher(message, name, teacher_id):
    teacher_phone_nomber = message.text
    bot.send_message(message.chat.id, f"{name}, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É\n–ü—Ä–∏–º–µ—Ä: plan_it@mail.com")
    bot.register_next_step_handler(message, lambda msg: mail_teacher(msg, name, teacher_id, teacher_phone_nomber))


def mail_teacher(message, name, teacher_id, teacher_phone_nomber):
    mail = message.text
    bot.send_message(message.chat.id, f"{name}, –≤–∞—à –ø–æ–ª:\n1. –ú—É–∂—Å–∫–æ–π\n2. –ñ–µ–Ω—Å–∫–∏–π\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É —Å –Ω—É–∂–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º:")
    bot.register_next_step_handler(message,
                                   lambda msg: gender_teacher(msg, name, teacher_id, teacher_phone_nomber, mail))


def gender_teacher(message, name, teacher_id, teacher_phone_nomber, mail):
    gender = message.text
    if gender == "1" or gender == "2":
        bot.send_message(message.chat.id, f"{name}, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–∞—Ñ–µ–¥—Ä—ã\n–ü—Ä–∏–º–µ—Ä: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã")
        bot.register_next_step_handler(message,
                                       lambda msg: department_teacher(msg, name, teacher_id, teacher_phone_nomber, mail,
                                                                      gender))
    else:
        bot.send_message(message.chat.id,
                         f"{name}, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n–≤–∞—à –ø–æ–ª:\n1. –ú—É–∂—Å–∫–æ–π\n2. –ñ–µ–Ω—Å–∫–∏–π\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É —Å –Ω—É–∂–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º:")
        bot.register_next_step_handler(message,
                                       lambda msg: gender_teacher(msg, name, teacher_id, teacher_phone_nomber, mail))


def department_teacher(message, name, teacher_id, teacher_phone_nomber, mail, gender):
    department = message.text
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute(
        'INSERT INTO teachers (teacher_id, name, phone_number, mail, gender, department) VALUES (?, ?, ?, ?, ?, ?)',
        (teacher_id, name, teacher_phone_nomber, mail, gender, department))
    connection.commit()
    connection.close()
    bot.send_message(message.chat.id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    changing_teacher(message, teacher_id)


# –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –î–õ–Ø –°–¢–£–î–ï–ù–¢–û–í –ò –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ï–ô
def changing_student(message, student_id):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT name, phone_number, mail, faculty, course, group_number FROM student WHERE student_id = ?",
                   (student_id,))
    info_about_student = cursor.fetchall()
    connection.commit()
    connection.close()
    output = "".join(
        f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n1) –ò–º—è: {info_about_student[i][0]}\n2) –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {info_about_student[i][1]}\n3) –ü–æ—á—Ç–∞: {info_about_student[i][2]}\n4) –§–∞–∫—É–ª—å—Ç–µ—Ç: {info_about_student[i][3]}\n5) –ö—É—Ä—Å: {info_about_student[i][4]}\n6) –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: {info_about_student[i][5]}"
        for i in range(len(info_about_student)))
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="changing_student"))
    bot.send_message(message.chat.id, output, reply_markup=markup)


def nomber_change(message):
    nomber = message.text
    print(nomber)
    student_id = message.chat.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT id, faculty FROM discipline")
    info_about_faculty = cursor.fetchall()
    connection.commit()
    connection.close()
    if nomber == "1":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û")
        bot.register_next_step_handler(message,
                                       lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))
    elif nomber == "2":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(message,
                                       lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))
    elif nomber == "3":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å:")
        bot.register_next_step_handler(message,
                                       lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))
    elif nomber == "4":
        output = "".join(
            f"{info_about_faculty[i][0]}) {info_about_faculty[i][1]}\n"
            for i in range(len(info_about_faculty)))
        bot.send_message(message.chat.id, f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –§–∞–∫—É–ª—å—Ç–µ—Ç:\n{output} ")
        bot.register_next_step_handler(message,
                                       lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))
    elif nomber == "5":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞:")
        bot.register_next_step_handler(message,
                                       lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))
    elif nomber == "6":
        try:
            connection = sqlite3.connect('my_database.db')
            cursor = connection.cursor()
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
            cursor.execute("SELECT faculty, course FROM student WHERE student_id = ?", (student_id,))
            info_about_student = cursor.fetchall()
            if not info_about_student:
                bot.send_message(message.chat.id, "–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            for i in range(len(info_about_student)):
                faculty = info_about_student[i][0]
                course = info_about_student[i][1]
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö
                cursor.execute("SELECT id, group_number, faculty, course FROM groups WHERE faculty = ? AND course = ?",
                               (faculty, course))
                info_about_faculty = cursor.fetchall()
            if not info_about_faculty:
                bot.send_message(message.chat.id, "–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            output = "".join(
                f"{info_about_faculty[i][0]}) {info_about_faculty[i][1]}, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {info_about_faculty[i][2]}, –∫—É—Ä—Å: {info_about_faculty[i][3]}\n"
                for i in range(len(info_about_faculty)))
            bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:\n{output}")
            bot.register_next_step_handler(message,
                                           lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))

        except Exception as e:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            if 'connection' in locals():
                connection.close()
    else:
        bot.send_message(message.chat.id,
                         "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
        bot.register_next_step_handler(message, nomber_change)


def changing_db_student(message, student_id, nomber, info_about_faculty):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    if nomber == '1':
        new = message.text
        cursor.execute("UPDATE student SET name = ? WHERE student_id= ?", (new, student_id))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –§–ò–û")
        changing_student(message, student_id)
    elif nomber == "2":
        new = message.text
        cursor.execute("UPDATE student SET phone_number = ? WHERE student_id= ?", (new, student_id))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        changing_student(message, student_id)
    elif nomber == "3":
        new = message.text
        cursor.execute("UPDATE student SET mail = ? WHERE student_id= ?", (new, student_id))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –ø–æ—á—Ç—É")
        changing_student(message, student_id)
    elif nomber == "4":
        try:
            new = int(message.text)
        except ValueError:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞.")
            bot.register_next_step_handler(message,
                                           lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))
            return

        have = False
        for i in range(len(info_about_faculty)):
            if info_about_faculty[i][0] == new:
                have = True
                faculty = info_about_faculty[i][1]
                cursor.execute("UPDATE student SET faculty = ? WHERE student_id= ?", (faculty, student_id))
                connection.commit()
                connection.close()
                bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")
                changing_student(message, student_id)

        if not have:
            bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:")
            bot.register_next_step_handler(message,
                                           lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))

    elif nomber == "5":
        new = message.text
        if new == "1" or new == "2" or new == "3" or new == "4":
            cursor.execute("UPDATE student SET course = ? WHERE student_id= ?", (new, student_id))
            connection.commit()
            connection.close()
            bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –∫—É—Ä—Å")
            changing_student(message, student_id)
        else:
            bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å\n–ü—Ä–∏–º–µ—Ä: 1")
            bot.register_next_step_handler(message,
                                           lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))
    elif nomber == "6":
        try:
            new = int(message.text)
        except ValueError:
            bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É:")
            bot.register_next_step_handler(message,
                                           lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))
            return
        have = False
        for i in range(len(info_about_faculty)):
            if info_about_faculty[i][0] == new:
                have = True
                groupp = info_about_faculty[i][1]
                cursor.execute("UPDATE student SET group_number = ? WHERE student_id= ?", (groupp, student_id))
                connection.commit()
                connection.close()
                bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã")
                changing_student(message, student_id)
        if not have:
            bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É:")
            bot.register_next_step_handler(message,
                                           lambda msg: changing_db_student(msg, student_id, nomber,
                                                                           info_about_faculty))


def changing_teacher(message, teacher_id):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT name, phone_number, mail, department FROM teachers WHERE teacher_id = ?", (teacher_id,))
    info_about_teacher = cursor.fetchall()
    connection.commit()
    connection.close()
    output = "".join(
        f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n1) –ò–º—è: {info_about_teacher[i][0]}\n2) –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {info_about_teacher[i][1]}\n3) –ü–æ—á—Ç–∞: {info_about_teacher[i][2]}\n4) –ö–∞—Ñ–µ–¥—Ä–∞: {info_about_teacher[i][3]}"
        for i in range(len(info_about_teacher)))
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ ", callback_data="changing_teacher"))
    bot.send_message(message.chat.id, output, reply_markup=markup)


def nomber_change_teacher(message):
    nomber = message.text
    teacher_id = message.chat.id
    if nomber == "1":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û")
        bot.register_next_step_handler(message, lambda msg: changing_db_teacher(msg, teacher_id, nomber))
    elif nomber == "2":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(message, lambda msg: changing_db_teacher(msg, teacher_id, nomber))
    elif nomber == "3":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å:")
        bot.register_next_step_handler(message, lambda msg: changing_db_teacher(msg, teacher_id, nomber))
    elif nomber == "4":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ñ–µ–¥—Ä—ã:")
        bot.register_next_step_handler(message, lambda msg: changing_db_teacher(msg, teacher_id, nomber))
    else:
        bot.send_message(message.chat.id,
                         "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–µ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
        bot.register_next_step_handler(message, nomber_change_teacher)


def changing_db_teacher(message, teacher_id, nomber):
    new = message.text
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    if nomber == '1':
        cursor.execute("UPDATE teachers SET name = ? WHERE teacher_id= ?", (new, teacher_id))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –§–ò–û")
        changing_teacher(message, teacher_id)
    if nomber == "2":
        cursor.execute("UPDATE teachers SET phone_number = ? WHERE teacher_id= ?", (new, teacher_id))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        changing_teacher(message, teacher_id)
    if nomber == "3":
        cursor.execute("UPDATE teachers SET mail = ? WHERE teacher_id= ?", (new, teacher_id))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –ø–æ—á—Ç—É")
        changing_teacher(message, teacher_id)
    if nomber == "4":
        cursor.execute("UPDATE teachers SET department = ? WHERE teacher_id= ?", (new, teacher_id))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –∫–∞—Ñ–µ–¥—Ä—É")
        changing_teacher(message, teacher_id)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
# –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ï–ú –î–ê–ù–ù–´–• –í –¢–ê–ë–õ–ò–¶–£ –î–ò–°–¶–ò–ü–õ–ò–ù–ê
@bot.message_handler(commands=['add_discipline'])
def add_data_to_table_discipline(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:")
    bot.register_next_step_handler(message, lambda msg: to_table_discipline(msg, message.from_user.id))


def to_table_discipline(message, teacher_id):
    name_discipline = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞:")
    bot.register_next_step_handler(message, lambda msg: to_table_dis(msg, name_discipline, teacher_id))


def to_table_dis(message, name_discipline, teacher_id):
    name_facyltet = message.text
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute('INSERT INTO discipline (name_of_discipline, teacher_id, faculty) VALUES (?, ?, ?)',
                   (name_discipline, teacher_id, name_facyltet))
    connection.commit()
    connection.close()
    bot.send_message(message.chat.id, f"–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞")
    select_data_for_teacher(message, teacher_id)


# –í–´–í–û–î–ò–ú –°–ü–ò–°–û–ö –í–°–ï–• –î–ò–°–¶–ò–ü–õ–ò–ù
def select_data_for_teacher(message, teacher_id):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT id, name_of_discipline, faculty FROM discipline WHERE teacher_id = ?", (teacher_id,))
    info_about_discipline = cursor.fetchall()
    connection.commit()
    connection.close()
    output = "".join(
        f"{info_about_discipline[i][0]}) {info_about_discipline[i][1]}, {info_about_discipline[i][2]}\n"
        for i in range(len(info_about_discipline)))
    print(output)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã", callback_data="changing"))
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É", callback_data="add"))
    bot.send_message(message.chat.id, f"–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:\n{output}", reply_markup=markup)


# –ú–ï–ù–Ø–ï–ú –ù–ê–ó–í–ê–ù–ò–ï –î–ò–°–¶–ò–ü–õ–ò–ù–´
def nomber_change_discepline(message):
    nomber = message.text
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã")
    bot.register_next_step_handler(message, lambda msg: changing_discepline(msg, nomber))


def changing_discepline(message, nomber):
    discepline = message.text
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞:")
    bot.register_next_step_handler(message, lambda msg: changing_disceplineee(msg, nomber, discepline))


def changing_disceplineee(message, nomber, discepline):
    name_facyltet = message.text
    nomber = int(nomber)
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT id, name_of_discipline, faculty FROM discipline WHERE id = ?", (nomber,))
    faculty = cursor.fetchall()
    connection.commit()
    connection.close()
    if not faculty:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º. –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    output = "".join(f"{faculty[i][0]}) {faculty[i][1]}\n" for i in range(len(faculty)))
    if output:
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("UPDATE discipline SET name_of_discipline = ?, faculty = ? WHERE id= ?",
                       (discepline, name_facyltet, nomber))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –¥–∞–Ω–Ω—ã–µ.")
        select_data_for_teacher(message, message.chat.id)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.")


# –î–û–ë–ê–í–õ–Ø–ï–ú –ì–†–£–ü–ü–£
@bot.message_handler(commands=['add_group'])
def groap_table(message):
    teacher_id = message.chat.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT id, faculty FROM discipline WHERE teacher_id = ?", (teacher_id,))
    faculty = cursor.fetchall()
    connection.commit()
    connection.close()
    if not faculty:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤.")
        return
    output = "".join(f"{faculty[i][0]}) {faculty[i][1]}\n" for i in range(len(faculty)))
    bot.send_message(message.chat.id,
                     f"–í—ã —Å–æ–∑–¥–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã:\n{output}\n–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–∑–¥–∞—ë—Ç—Å—è –≥—Ä—É–ø–ø–∞:")
    print(output)
    bot.register_next_step_handler(message, lambda msg: to_table_groap(msg, teacher_id, faculty))


def to_table_groap(message, teacher_id, faculty):
    try:
        id = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞.")
        bot.register_next_step_handler(message, lambda msg: to_table_groap(msg, teacher_id, faculty))
        return
    have = False
    for i in range(len(faculty)):
        if faculty[i][0] == id:
            have = True
            facultet = faculty[i][1]
            bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {facultet}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")
            bot.register_next_step_handler(message, lambda msg, f=facultet: to_groap(msg, teacher_id, f))
    if not have:
        # –ï—Å–ª–∏ –º—ã –≤—ã—à–ª–∏ –∏–∑ —Ü–∏–∫–ª–∞ –±–µ–∑ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, lambda msg: to_table_groap(msg, teacher_id, faculty))


def to_groap(message, teacher_id, facultet):
    group = message.text
    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –∫—É—Ä—Å:")
    bot.register_next_step_handler(message, lambda msg: to_tableee_groap(msg, teacher_id, facultet, group))


def to_tableee_groap(message, teacher_id, facultet, group):
    cyrs = message.text
    if cyrs == "1" or cyrs == "2" or cyrs == "3" or cyrs == "4":
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute('INSERT INTO groups (group_number, faculty, course) VALUES (?, ?, ?)',
                       (group, facultet, cyrs))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å –≤ –Ω–µ—ë –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —Å—Ç—É–¥–µ–Ω—Ç—ã.")
        spisok_grupp(message)
    else:
        bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –£–∫–∞–∂–∏—Ç–µ –∫—É—Ä—Å:")
        bot.register_next_step_handler(message, lambda msg: to_tableee_groap(msg, teacher_id, facultet, group))


# –í–´–í–û–î–ò–ú –°–ü–ò–°–û–ö –ì–†–£–ü–ü
def spisok_grupp(message):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM groups")
    groups = cursor.fetchall()
    connection.commit()
    connection.close()
    output = "".join(f"{groups[i][0]}) {groups[i][1]}, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {groups[i][2]}, –∫—É—Ä—Å: {groups[i][3]}\n" for i in
                     range(len(groups)))
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—É", callback_data="changing_group"))
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add_group"))
    if output:
        bot.send_message(message.chat.id, f"–í—Å–µ –≥—Ä—É–ø–ø—ã:\n{output}", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.")


# –ú–ï–ù–Ø–ï–ú –ù–ê–ó–í–ê–ù–ò–ï –ì–†–£–ü–ü–´
def nomber_change_group(message):
    nomber = message.text
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")
    bot.register_next_step_handler(message, lambda msg: changing_group(msg, nomber))


def changing_group(message, nomber):
    nomber_group = message.text
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å:")
    bot.register_next_step_handler(message, lambda msg: changing_grouppp(msg, nomber, nomber_group))


def changing_grouppp(message, nomber, nomber_group):
    cyrs = message.text
    if cyrs == "1" or cyrs == "2" or cyrs == "3" or cyrs == "4":
        nomber = int(nomber)
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("UPDATE groups SET group_number = ?, course = ? WHERE id= ?", (nomber_group, cyrs, nomber))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–≤—ã –ø–æ–º–µ–Ω—è–ª–∏ –¥–∞–Ω–Ω—ã–µ.")
        spisok_grupp(message)
    else:
        bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –£–∫–∞–∂–∏—Ç–µ –∫—É—Ä—Å:")
        bot.register_next_step_handler(message, lambda msg: changing_grouppp(msg, nomber, nomber_group))


# –í–´–í–û–î–ò–ú –°–ü–ò–°–û–ö –°–¢–£–î–ï–ù–¢–û–í –°–î–ê–í–®–ò–• –ò –ù–ï –°–î–ê–í–®–ò–• –†–ê–ë–û–¢–£
@bot.message_handler(commands=['complete_task'])
def complete_task(message):
    teacher_id = message.chat.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute(
        "SELECT id, name_of_discipline, group_number, the_task_for_student, send_time, send_date FROM task_for_student WHERE teacher_id = ? AND statys = 1 ",
        (teacher_id,))
    info_send_task = cursor.fetchall()
    connection.commit()
    connection.close()
    if info_send_task:
        output = "".join(
            f"\n{info_send_task[i][0]}) {info_send_task[i][2]} {info_send_task[i][1]}\n–ó–∞–¥–∞—á–∞:\n{info_send_task[i][3]}\n–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {info_send_task[i][4]} {info_send_task[i][5]}"
            for i in
            range(len(info_send_task)))
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statystic"))
        markup.add(types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data="send_mark"))
        bot.send_message(message.chat.id, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–¥–∞—á–∏:{output}", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, f"–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")


def statystics(message, teacher_id):
    try:
        nomber = int(message.text)
    except ValueError:
        bot.send_message(teacher_id,
                         "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message,
                                       lambda msg: statystics(msg, teacher_id))
        return
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute(
        "SELECT name_student, group_number, the_task_for_student, name_of_discipline FROM task_list WHERE teacher_id = ? AND task_id = ? AND complete IS NULL",
        (teacher_id, nomber))
    info_dont_complete_task = cursor.fetchall()
    cursor.execute(
        "SELECT id, name_of_discipline, group_number, the_task_for_student, send_time, send_date FROM task_for_student WHERE teacher_id = ? AND statys = 1 ",
        (teacher_id,))
    info_send_task = cursor.fetchall()
    cursor.execute(
        "SELECT name_student, group_number, task_time, date, the_task_for_student, name_of_discipline FROM task_list WHERE teacher_id = ? AND task_id = ? AND complete = 1 ",
        (teacher_id, nomber))
    info_complete_task = cursor.fetchall()
    cursor.execute("SELECT COUNT (*) FROM task_list WHERE teacher_id = ? AND task_id = ? AND complete IS NULL",
                   (teacher_id, nomber))
    count_dont_complete_task = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM task_list WHERE teacher_id = ? AND task_id = ? AND complete = 1 ",
                   (teacher_id, nomber))
    count_complete_task = cursor.fetchone()[0]
    connection.commit()
    connection.close()
    have = False
    for i in range(len(info_send_task)):
        if info_send_task[i][0] == nomber:
            have = True
            if info_complete_task:
                output = "".join(
                    f"\n{info_complete_task[i][0]}- {info_complete_task[i][1]}, {info_complete_task[i][5]}\n–æ—Ç–ø—Ä–∞–≤–∏–ª(-–ª–∞) —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ:\n{info_complete_task[i][4]}\n–í {info_complete_task[i][2]} {info_complete_task[i][3]}"
                    for i in
                    range(len(info_complete_task)))
                bot.send_message(message.chat.id, f"–†–ï–®–ï–ù–ò–ï –û–¢–ü–†–ê–í–ò–õ–ò {count_complete_task} —Å—Ç—É–¥–µ–Ω—Ç–∞(-–æ–≤):{output}")
            if info_dont_complete_task:
                out = "".join(
                    f"\n{info_dont_complete_task[i][0]}- {info_dont_complete_task[i][1]}"
                    for i in
                    range(len(info_dont_complete_task)))
                bot.send_message(message.chat.id, f"–ù–ï –û–¢–ü–†–ê–í–ò–õ–ò {count_dont_complete_task} —Å—Ç—É–¥–µ–Ω—Ç–∞(-–æ–≤): {out}")
            else:
                bot.send_message(message.chat.id, f"–ù–µ—Ç —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
    if not have:
        bot.send_message(teacher_id, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç.")


def send_comment(message, teacher_id):
    try:
        nomber = int(message.text)
    except ValueError:
        bot.send_message(teacher_id,
                         "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message,
                                       lambda msg: send_comment(msg, teacher_id))
        return
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute(
        "SELECT id, name_of_discipline, group_number, the_task_for_student, send_time, send_date FROM task_for_student WHERE teacher_id = ? AND statys = 1 ",
        (teacher_id,))
    info_send_task = cursor.fetchall()
    have = False
    for i in range(len(info_send_task)):
        if info_send_task[i][0] == nomber:
            have = True
            cursor.execute(
                "SELECT id, name_student, group_number, task_time, date, the_task_for_student, name_of_discipline FROM task_list WHERE teacher_id = ? AND task_id = ? AND complete = 1 ",
                (teacher_id, nomber))
            info_complete_task = cursor.fetchall()
            if info_complete_task:
                output = "".join(
                    f"\n{info_complete_task[i][0]}) {info_complete_task[i][1]}- {info_complete_task[i][2]}, {info_complete_task[i][6]}\n–æ—Ç–ø—Ä–∞–≤–∏–ª(-–ª–∞) —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ:\n{info_complete_task[i][5]}\n–í {info_complete_task[i][3]} {info_complete_task[i][4]}"
                    for i in
                    range(len(info_complete_task)))
                bot.send_message(message.chat.id, f"–†–ï–®–ï–ù–ò–ï –û–¢–ü–†–ê–í–ò–õ–ò:\n{output}")
                bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ—à–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É:")
                bot.register_next_step_handler(message,
                                               lambda msg: send_mark(msg, teacher_id, nomber, info_complete_task))
            else:
                bot.send_message(message.chat.id, f"–ù–µ—Ç —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
    connection.commit()
    connection.close()
    if not have:
        bot.send_message(teacher_id, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç.")


def send_mark(message, teacher_id, nomber, info_complete_task):
    try:
        id = int(message.text)
    except ValueError:
        bot.send_message(teacher_id,
                         "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message,
                                       lambda msg: send_mark(msg, teacher_id, nomber, info_complete_task))
        return
    have = False
    for i in range(len(info_complete_task)):
        if info_complete_task[i][0] == id:
            have = True
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("2 - –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", callback_data=f"neyd{id}-{nomber}"))
            markup.add(
                types.InlineKeyboardButton("3 - —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", callback_data=f"ydovletvoritelno{id}-{nomber}"))
            markup.add(types.InlineKeyboardButton("4 - —Ö–æ—Ä–æ—à–æ", callback_data=f"horosho{id}-{nomber}"))
            markup.add(types.InlineKeyboardButton("5 - –æ—Ç–ª–∏—á–Ω–æ", callback_data=f"otlichno{id}-{nomber}"))
            bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:", reply_markup=markup)
    if not have:
        bot.send_message(teacher_id, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç.")


def ocenka(message, teacher_id, mark, id, nomber):
    comment = message.text
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute(
        "SELECT task_id, student_id, group_number, the_task_for_student, name_of_discipline FROM task_list WHERE teacher_id = ? AND id = ? AND complete = 1",
        (teacher_id, id))
    complete = cursor.fetchall()
    now = datetime.now()
    new_time = now + timedelta(minutes=1)
    current_date = now.strftime("%d.%m")
    current_time = new_time.strftime("%H:%M")
    for task in complete:
        task_id, student_id, group_number, the_task_for_student, name_of_discipline = task
        cursor.execute(
            'INSERT INTO teacher_comment (task_id, student_id, teacher_id, name_of_discipline, the_task_for_student, send_time, date, group_number, comment, mark) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            (task_id, student_id, teacher_id, name_of_discipline, the_task_for_student, current_time, current_date,
             group_number, comment, mark))
        connection.commit()
        connection.close()
        bot.send_message(teacher_id,
                         f"–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n–û—Ü–µ–Ω–∫–∞ {mark}\n{comment}\n–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É. –í–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")


# –£–¥–∞–ª—è–µ–º —É—á—ë—Ç–Ω—É—é –∑–∞–ø–∏—Å—å
@bot.message_handler(commands=['delete_account'])
def delete_zapis(message):
    user_id = message.chat.id
    # –ü–†–û–í–ï–†–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (user_id,))
    count_teacher = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (user_id,))
    count_student = cursor.fetchone()[0]
    if count_teacher > 0 and count_student > 0:
        bot.send_message(message.chat.id,
                         f"–£ –≤–∞—Å –¥–≤–µ —É—á—ë—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏. –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç –∏ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.\n–ö–∞–∫—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?\n1. –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å\n2. –°—Ç—É–¥–µ–Ω—Ç ")
        bot.register_next_step_handler(message, lambda msg: teacher_or_student_account(msg, user_id))
    elif count_teacher > 0 and count_student == 0:
        cursor.execute("SELECT name, phone_number, mail, department FROM teachers WHERE teacher_id = ?", (user_id,))
        info_about_teacher = cursor.fetchall()
        connection.commit()
        connection.close()
        output = "".join(
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n1) –ò–º—è: {info_about_teacher[i][0]}\n2) –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {info_about_teacher[i][1]}\n3) –ü–æ—á—Ç–∞: {info_about_teacher[i][2]}\n4) –ö–∞—Ñ–µ–¥—Ä–∞: {info_about_teacher[i][3]}"
            for i in range(len(info_about_teacher)))
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–î–∞", callback_data="delete"))
        markup.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="ne_delete"))
        bot.send_message(message.chat.id, f"–£ –≤–∞—Å –µ—Å—Ç—å 1 —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å,\n{output}\n —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
                         reply_markup=markup)
    elif count_teacher == 0 and count_student > 0:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–î–∞", callback_data="deletee"))
        markup.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="ne_delete"))
        cursor.execute(
            "SELECT name, phone_number, mail, faculty, course, group_number FROM student WHERE student_id = ?",
            (user_id,))
        info_about_student = cursor.fetchall()
        connection.commit()
        connection.close()
        output = "".join(
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n1) –ò–º—è: {info_about_student[i][0]}\n2) –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {info_about_student[i][1]}\n3) –ü–æ—á—Ç–∞: {info_about_student[i][2]}\n4) –§–∞–∫—É–ª—å—Ç–µ—Ç: {info_about_student[i][3]}\n5) –ö—É—Ä—Å: {info_about_student[i][4]}\n6) –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: {info_about_student[i][5]}"
            for i in range(len(info_about_student)))
        bot.send_message(message.chat.id, f"–£ –≤–∞—Å –µ—Å—Ç—å 1 —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å,\n{output}\n —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
                         reply_markup=markup)
    else:
        connection.commit()
        connection.close()
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
        bot.send_message(message.chat.id,
                         "–£ –≤–∞—Å –Ω–µ—Ç —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏. –•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
                         reply_markup=markup)


def teacher_or_student_account(message, user_id):
    statys = message.text
    if statys == "1":
        statys = int(statys)
        delete_user(message, user_id, statys)
    elif statys == "2":
        statys = int(statys)
        delete_user(message, user_id, statys)
    else:
        bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")


def delete_user(message, user_id, statys):
    if statys == 1:
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("DELETE FROM teachers WHERE teacher_id = ?", (user_id,))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id,
                         f"–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")
    if statys == 2:
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("DELETE FROM student WHERE student_id= ?", (user_id,))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id,
                         f"–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")


# –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ï–ì–£–õ–Ø–†–ù–û–ô (–°–¢–£–î–ï–ù–¢) –ò –ù–ï–†–ï–ì–ï–ì–£–õ–Ø–†–ù–û–ô –ó–ê–î–ê–ß–ò (–°–¢–£–î–ï–ù–¢ –ò –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨)
@bot.message_handler(commands=['add_regular_task', 'add_task'])
def new_task(message):
    regular = None
    if message.text == "/add_regular_task":
        regular = True
    else:
        regular = False
    print(message.text)
    print(regular)
    user_id = message.from_user.id
    # –ü–†–û–í–ï–†–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (user_id,))
    count_teacher = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (user_id,))
    count_student = cursor.fetchone()[0]
    connection.commit()
    connection.close()
    if count_teacher > 0 and count_student > 0:
        delete_zapis(message)
    elif count_teacher > 0 and count_student == 0:
        statys = 1
        bot.send_message(message.chat.id, "–ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å? –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        bot.register_next_step_handler(message, lambda msg: whattime(msg, message.from_user.id, regular, statys))
    elif count_teacher == 0 and count_student > 0:
        statys = 2
        bot.send_message(message.chat.id, "–ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å? –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        bot.register_next_step_handler(message, lambda msg: whattime(msg, message.from_user.id, regular, statys))
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
        bot.send_message(message.chat.id,
                         "–£ –≤–∞—Å –Ω–µ—Ç —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
                         reply_markup=markup)


def whattime(message, user_id, regular, statys):
    regular = regular
    task_plan = message.text
    # –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨
    if statys == 1:
        bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É? (–ù–∞–ø—Ä–∏–º–µ—Ä - 13:30)")
        bot.register_next_step_handler(message, lambda msg: save_time(msg, task_plan, user_id, regular, statys))
    # –°–¢–£–î–ï–ù–¢
    elif statys == 2:
        bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è? (–ù–∞–ø—Ä–∏–º–µ—Ä - 13:30)")
        bot.register_next_step_handler(message, lambda msg: save_time(msg, task_plan, user_id, regular, statys))


def save_time(message, task_plan, user_id, regular, statys):
    regular = regular
    what_time = message.text
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Å—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 23 –∏ –º–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59
    try:
        hours, minutes = map(int, what_time.split(':'))
        if 0 <= hours < 24 and 0 <= minutes < 60:
            bot.send_message(message.chat.id,
                             "–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú \n(–ù–∞–ø—Ä–∏–º–µ—Ä - 12.07)")
            bot.register_next_step_handler(message,
                                           lambda msg: save_task(msg, task_plan, user_id, what_time, regular, statys))
        else:
            bot.send_message(message.chat.id,
                             f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú \n –ü—Ä–∏–º–µ—Ä (13:30)")
            bot.register_next_step_handler(message, lambda msg: save_time(msg, task_plan, user_id, regular, statys))

    except ValueError:
        bot.send_message(user_id,
                         "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú \n –ü—Ä–∏–º–µ—Ä (13:30)")
        bot.register_next_step_handler(message, lambda msg: save_time(msg, task_plan, user_id, regular, statys))


def save_task(message, task_plan, user_id, what_time, regular, statys):
    date_time = message.text
    if statys == 1:
        try:
            days, month = map(int, date_time.split('.'))
            print(month, days)
            if 1 <= month <= 12 and 1 <= days < 32:
                connection = sqlite3.connect('my_database.db')
                cursor = connection.cursor()
                cursor.execute("SELECT id, name_of_discipline,faculty FROM discipline WHERE teacher_id = ?", (user_id,))
                discipline = cursor.fetchall()
                connection.commit()
                connection.close()
                output = "".join(f"{discipline[i][0]}) {discipline[i][1]}, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {discipline[i][2]}" for i in
                                 range(len(discipline)))
                if output:
                    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:{output}")
                    bot.register_next_step_handler(message,
                                                   lambda msg: discipline_number_statys_teacher_1(msg, task_plan,
                                                                                                  user_id, what_time,
                                                                                                  date_time,
                                                                                                  discipline))
                else:
                    bot.send_message(message.chat.id, f"–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.")
            else:
                bot.send_message(message.chat.id,
                                 "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú \n(–ù–∞–ø—Ä–∏–º–µ—Ä - 12.07)")
                bot.register_next_step_handler(message,
                                               lambda msg: save_task(msg, task_plan, user_id, what_time, regular,
                                                                     statys))
        except ValueError:
            bot.send_message(user_id,
                             "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú \n(–ù–∞–ø—Ä–∏–º–µ—Ä - 12.07)")
            bot.register_next_step_handler(message,
                                           lambda msg: save_task(msg, task_plan, user_id, what_time, regular, statys))
        except Exception as e:
            bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    if statys == 2:
        try:
            days, month = map(int, date_time.split('.'))
            print(month, days)
            if 1 <= month <= 12 and 1 <= days < 32:
                count_regular_task = 0
                connection = sqlite3.connect('my_database.db')
                cursor = connection.cursor()
                cursor.execute(
                    'INSERT INTO tasks (user_id, task, task_time, date, regular_task, count_regular_task) VALUES (?, ?, ?, ?, ?, ?)',
                    (user_id, task_plan, what_time, date_time, regular, count_regular_task))
                connection.commit()
                connection.close()
                bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            else:
                bot.send_message(message.chat.id,
                                 "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú \n(–ù–∞–ø—Ä–∏–º–µ—Ä - 12.07)")
                bot.register_next_step_handler(message,
                                               lambda msg: save_task(msg, task_plan, user_id, what_time, regular,
                                                                     statys))
        except ValueError:
            bot.send_message(user_id,
                             "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú \n(–ù–∞–ø—Ä–∏–º–µ—Ä - 12.07)")
            bot.register_next_step_handler(message,
                                           lambda msg: save_task(msg, task_plan, user_id, what_time, regular, statys))
        except Exception as e:
            bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


# –î–ê–õ–¨–®–ï –¢–û–õ–¨–ö–û –î–õ–Ø –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø
def discipline_number_statys_teacher_1(message, task_plan, user_id, what_time, date_time, discipline):
    try:
        nomer = int(message.text)
    except ValueError:
        bot.send_message(user_id,
                         "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message,
                                       lambda msg: discipline_number_statys_teacher_1(msg, task_plan, user_id,
                                                                                      what_time, date_time, discipline))
        return
    have = False
    for i in range(len(discipline)):
        if discipline[i][0] == nomer:
            have = True
            facultet = discipline[i][2]
            name_of_discipline = discipline[i][1]
            connection = sqlite3.connect('my_database.db')
            cursor = connection.cursor()
            cursor.execute("SELECT id, group_number, faculty, course FROM groups WHERE faculty = ?", (facultet,))
            group = cursor.fetchall()
            connection.commit()
            connection.close()
            output = "".join(f"{group[i][0]}) {group[i][1]}, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {group[i][2]}, {group[i][3]}\n" for i in
                             range(len(group)))
            if output:
                bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:\n{output}")
                bot.register_next_step_handler(message,
                                               lambda msg: group_number_statys_teacher_1(msg, task_plan, user_id,
                                                                                         what_time, date_time,
                                                                                         name_of_discipline, facultet,
                                                                                         group))
            else:
                bot.send_message(message.chat.id, f"–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≥—Ä—É–ø–ø—É.")
    if not have:
        bot.send_message(user_id,
                         "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message,
                                       lambda msg: discipline_number_statys_teacher_1(msg, task_plan, user_id,
                                                                                      what_time, date_time, discipline))


def group_number_statys_teacher_1(message, task_plan, user_id, what_time, date_time, name_of_discipline, facultet,
                                  group):
    try:
        id = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.")
        bot.register_next_step_handler(message,
                                       lambda msg: group_number_statys_teacher_1(msg, task_plan, user_id, what_time,
                                                                                 date_time, name_of_discipline,
                                                                                 facultet, group))
        return
    have = False
    for i in range(len(group)):
        if group[i][0] == id:
            have = True
            group_number = group[i][1]
            course = group[i][3]
            bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∑–∞–¥–∞–Ω–∏–µ–º")
            bot.register_next_step_handler(message,
                                           lambda msg: document_number_statys_teacher_1(msg, task_plan, user_id,
                                                                                        what_time,
                                                                                        date_time,
                                                                                        name_of_discipline, facultet,
                                                                                        group_number, course))
    if not have:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message,
                                       lambda msg: group_number_statys_teacher_1(msg, task_plan, user_id, what_time,
                                                                                 date_time, name_of_discipline,
                                                                                 facultet, group))


def document_number_statys_teacher_1(message, task_plan, user_id, what_time, date_time, name_of_discipline, facultet,
                                     group_number, course):
    if message.document:
        file_name = message.document.file_name
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(file_name, 'wb') as new_file:
            new_file.write(downloaded_file)
            connection = sqlite3.connect('my_database.db')
            cursor = connection.cursor()
            cursor.execute(
                'INSERT INTO task_for_student (send_date, send_time, name_of_discipline, the_task_for_student, document, group_number, teacher_id, faculty, course) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)',
                (date_time, what_time, name_of_discipline, task_plan, file_name, group_number, user_id, facultet,
                 course))
            connection.commit()
            connection.close()
            bot.send_message(message.chat.id, "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞.\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
            # –í–´–í–û–î –ó–ê–ì–†–£–ñ–ï–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç.")
        bot.register_next_step_handler(message,
                                       lambda msg: document_number_statys_teacher_1(msg, task_plan, user_id, what_time,
                                                                                    date_time, name_of_discipline,
                                                                                    facultet, group_number, course))


# –î–õ–Ø –°–¢–£–î–ï–ù–¢–û–í
@bot.message_handler(commands=['task_from_the_teacher'])
def task_list(message):
    student_id = message.chat.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute(
        "SELECT id, name_of_discipline, the_task_for_student FROM task_list WHERE student_id = ? AND complete IS NULL ",
        (student_id,))
    tasks = cursor.fetchall()
    connection.commit()
    connection.close()
    output = "".join(f"{i + 1}) {tasks[i][1]}\n–ó–ê–î–ê–ß–ê:\n{tasks[i][2]}, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n" for i in range(len(tasks)))
    print(output)
    if tasks:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é", callback_data="send_completed_task"))
        bot.send_message(message.chat.id, f"{message.from_user.first_name}, –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{output}",
                         reply_markup=markup)
    else:
        bot.send_message(message.chat.id, f'{message.from_user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.')


def send_task_for_teacher(message, student_id):
    try:
        nomber = int(message.text)
    except ValueError:
        bot.send_message(student_id,
                         "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message,
                                       lambda msg: send_task_for_teacher(msg, student_id))
        return
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT id FROM task_list WHERE student_id = ? AND complete IS NULL ", (student_id,))
    tasks = cursor.fetchall()
    if not tasks:
        bot.send_message(message.chat.id, f'{message.from_user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.')
        return
    if nomber < 1 or nomber > len(tasks):
        bot.send_message(message.chat.id,
                         f'{message.from_user.first_name}, –≤–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.')
        return
    tasks_id = tasks[nomber - 1][0]
    bot.send_message(message.chat.id, f"{message.from_user.first_name}, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏")
    connection.commit()
    connection.close()
    bot.register_next_step_handler(message, lambda msg: send_document_for_teacher(msg, student_id, tasks_id))


def send_document_for_teacher(message, student_id, tasks_id):
    if message.document:
        file_name = message.document.file_name
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(file_name, 'wb') as new_file:
            new_file.write(downloaded_file)
            now = datetime.now()
            new_time = now + timedelta(minutes=1)
            current_date = now.strftime("%d.%m")
            current_time = new_time.strftime("%H:%M")
            connection = sqlite3.connect('my_database.db')
            cursor = connection.cursor()
            cursor.execute("UPDATE task_list SET document = ?, task_time = ?, date = ? WHERE id = ?",
                           (file_name, current_time, current_date, tasks_id,))
            connection.commit()
            connection.close()
            bot.send_message(student_id,
                             "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞.\n–í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É.\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç.")
        bot.register_next_step_handler(message,
                                       lambda msg: send_document_for_teacher(msg, student_id, tasks_id))


# –î–û–°–¢–ê–Å–ú –í–°–ï –ó–ê–î–ê–ß–ò –ò–ó –ë–î
@bot.message_handler(commands=['all_tasks'])
def get_all_tasks_from_db(message):
    user_id = message.from_user.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT task, task_time, date FROM tasks WHERE user_id = ?", (user_id,))
    tasks = cursor.fetchall()
    cursor.execute(
        "SELECT task_id, name_of_discipline, the_task_for_student FROM task_list WHERE student_id = ? AND complete IS NULL ",
        (user_id,))
    tasks_from_teacher = cursor.fetchall()
    connection.commit()
    connection.close()
    output = "".join(f"{i + 1}) {tasks[i][0]} –≤ {tasks[i][1]}, {tasks[i][2]}\n" for i in range(len(tasks)))
    output_task_from_teacher = "".join(
        f"–ó–∞–¥–∞—á–∞ ‚Ññ{tasks_from_teacher[i][0]}\n {tasks_from_teacher[i][1]}\n–ó–∞–¥–∞–Ω–∏–µ:{tasks_from_teacher[i][2]}\n" for i
        in range(len(tasks_from_teacher)))
    if len(output) != 0:
        bot.send_message(message.chat.id,
                         f"{message.from_user.first_name} {message.from_user.last_name}, –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:")
        bot.send_message(message.chat.id, output)

    if len(output_task_from_teacher) != 0:
        bot.send_message(message.chat.id, output_task_from_teacher)
    else:
        bot.send_message(message.chat.id,
                         f'{message.from_user.first_name}, —É –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.')


# –£–î–ê–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ò –ò–ó –ë–î
@bot.message_handler(commands=['delete_tasks'])
def delete_task_from_db(message):
    user_id = message.from_user.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (user_id,))
    count_teacher = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (user_id,))
    count_student = cursor.fetchone()[0]
    if count_teacher > 0 and count_student > 0:
        delete_zapis(message)
    elif count_teacher > 0 and count_student == 0:
        statys = 1
        cursor.execute("SELECT COUNT (*) FROM task_for_student WHERE teacher_id = ?", (user_id,))
        count = cursor.fetchone()[0]
        if count > 0:
            cursor.execute(
                "SELECT id, the_task_for_student, name_of_discipline, send_date, send_time, group_number FROM task_for_student WHERE teacher_id = ?",
                (user_id,))
            tasks = cursor.fetchall()
            proverka_id = "".join(f"{x[0]} " for x in tasks)
            output = "".join(
                f"‚Ññ{x[0]} - {x[2]}, –ó–ê–î–ê–ß–ê: {x[1]}\n–î–õ–Ø –ì–†–£–ü–ü–´:{x[5]}\n–í–†–ï–ú–Ø –û–¢–ü–†–ê–í–ö–ò: {x[3]}, {x[4]}\n" for x in tasks)
            bot.send_message(message.chat.id,
                             f"{message.from_user.first_name}, –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:")
            bot.send_message(message.chat.id, output)
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")
            bot.register_next_step_handler(message, lambda msg: delete_tasks_from_db(msg, proverka_id, statys))
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á")
    elif count_teacher == 0 and count_student > 0:
        statys = 2
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("SELECT COUNT (*) FROM tasks WHERE user_id = ?", (user_id,))
        count = cursor.fetchone()[0]
        if count > 0:
            cursor.execute("SELECT id, task, task_time, date FROM tasks WHERE user_id = ?", (user_id,))
            tasks = cursor.fetchall()
            proverka_id = "".join(f"{x[0]} " for x in tasks)
            output = "".join(f"{x[0]} - {x[1]} –≤ {x[2]}, {x[3]}\n" for x in tasks)
            bot.send_message(message.chat.id,
                             f"{message.from_user.first_name} {message.from_user.last_name}, –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:")
            bot.send_message(message.chat.id, output)
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")
            bot.register_next_step_handler(message, lambda msg: delete_tasks_from_db(msg, proverka_id, statys))
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á")
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
        bot.send_message(message.chat.id,
                         "–£ –≤–∞—Å –Ω–µ—Ç —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
                         reply_markup=markup)
    connection.commit()
    connection.close()


def delete_tasks_from_db(message, proverka_id, statys):
    id = message.text
    user_id = message.from_user.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    try:
        if statys == 1:
            if id in proverka_id:
                id = int(id)
                cursor.execute(
                    "SELECT student_id, task_id, name_of_discipline, the_task_for_student FROM task_list WHERE task_id = ?",
                    (id,))
                tasks = cursor.fetchall()
                cursor.execute("DELETE FROM task_for_student WHERE id = ?", (id,))
                cursor.execute("DELETE FROM task_list WHERE task_id = ?", (id,))
                for task in tasks:
                    student_id, task_id, name_of_discipline, the_task_for_student = task
                    bot.send_message(student_id,
                                     f"–ó–∞–¥–∞—á–∞ ‚Ññ{task_id}, {name_of_discipline}\n–ó–∞–¥–∞–Ω–∏–µ:{the_task_for_student}\n–£–î–ê–õ–ï–ù–û –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ï–ú")
                cursor.execute("SELECT COUNT(*) FROM task_for_student WHERE teacher_id = ?", (user_id,))
                count = cursor.fetchone()[0]
                if count > 0:
                    bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ {id} —É–¥–∞–ª–µ–Ω–∞")
                else:
                    bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ {id} —É–¥–∞–ª–µ–Ω–∞")
                    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
            else:
                bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç.")
        elif statys == 2:
            if id in proverka_id:
                id = int(id)
                cursor.execute("DELETE FROM tasks WHERE id = ?", (id,))
                cursor.execute("SELECT COUNT(*) FROM tasks WHERE user_id = ?", (user_id,))
                count = cursor.fetchone()[0]
                if count > 0:
                    bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ {id} —É–¥–∞–ª–µ–Ω–∞")
                    get_all_tasks_from_db(message)
                else:
                    bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ {id} —É–¥–∞–ª–µ–Ω–∞")
                    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
            else:
                bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç.")
        connection.commit()
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
        print(f"Error: {e}")
    finally:
        connection.close()


# –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ
def send_message_ga(user_id, message):
    bot.send_message(chat_id=user_id, text=f"–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: {message}")


# –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ô –ó–ê–î–ê–ß–ò –°–¢–£–î–ï–ù–¢–ê
def check_tasks():
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    now = datetime.now()
    current_time = now.strftime("%H:%M")
    current_date = now.strftime("%d.%m")
    # –í—ã–±–æ—Ä–∫–∞ –∑–∞–¥–∞—á —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –¥–∞—Ç–æ–π
    cursor.execute("""
        SELECT id, user_id, task, regular_task 
        FROM tasks 
        WHERE task_time = ? AND date = ?
    """, (current_time, current_date))
    tasks = cursor.fetchall()
    for task in tasks:
        task_id, user_id, message, regular_task = task
        send_message_ga(user_id, message)
        if regular_task == 1:
            next_day = now + timedelta(days=1)
            current_datee = next_day.strftime("%d.%m")
            cursor.execute("""
                            UPDATE tasks 
                            SET date = ?
                            WHERE id = ?
                        """, (current_datee, task_id))
            cursor.execute("""UPDATE tasks 
                            SET count_regular_task = count_regular_task + 1
                            WHERE id = ?
                        """, (task_id,))
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è, –æ–±–Ω–æ–≤–ª—è–µ–º complete –Ω–∞ True
        if not regular_task:
            cursor.execute("""
                UPDATE tasks 
                SET complete = 1 
                WHERE id = ?
            """, (task_id,))

    conn.commit()
    conn.close()


# –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ò –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø
def send_doc():
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    now = datetime.now()
    current_time = now.strftime("%H:%M")
    current_date = now.strftime("%d.%m")
    cursor.execute("""
            SELECT id, document, group_number, name_of_discipline, the_task_for_student, teacher_id, statys
            FROM task_for_student 
            WHERE send_time = ? AND send_date = ? """, (current_time, current_date))
    tasks = cursor.fetchall()
    for task in tasks:
        id, document, group_number, name_of_discipline, the_task_for_student, teacher_id, statys = task
        if not statys:
            cursor.execute("""
                UPDATE task_for_student 
                SET statys = 1 
                WHERE id = ?
            """, (id,))
            cursor.execute("""
                    SELECT student_id 
                    FROM student 
                    WHERE group_number = ? """, (group_number,))
            for_student = cursor.fetchall()
            for student in for_student:
                student_id = student[0]
                send_message_ga(student_id, f"{name_of_discipline}\n–ó–ê–î–ê–ù–ò–ï:\n{the_task_for_student}\n")
                bot.send_document(student_id, open(f"{document}", "rb"))
                cursor.execute(
                    'INSERT INTO task_list (task_id, student_id, teacher_id, name_of_discipline, the_task_for_student, group_number) VALUES (?, ?, ?, ?, ?, ?)',
                    (id, student_id, teacher_id, name_of_discipline, the_task_for_student, group_number))
            send_message_ga(teacher_id,
                            f"{name_of_discipline}\n–ó–∞–¥–∞—á–∞: {the_task_for_student}\n–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –≥—Ä—É–ø–ø—ã {group_number}")
            cursor.execute("UPDATE task_for_student SET document = NULL WHERE id= ?", (id,))
        os.remove(f"{document}")
    conn.commit()
    conn.close()


# –û–¢–ü–†–ê–í–ö–ê –†–ï–®–ï–ù–Å–ù–ù–û–ì–û –ó–ê–î–ê–ù–ò–Ø –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Æ
def send_doc_for_teacher():
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    now = datetime.now()
    current_time = now.strftime("%H:%M")
    current_date = now.strftime("%d.%m")
    cursor.execute("""
            SELECT task_id, student_id, name_of_discipline, teacher_id, the_task_for_student, document, group_number, complete
            FROM task_list 
            WHERE task_time = ? AND date = ? """, (current_time, current_date))
    tasks = cursor.fetchall()
    for task in tasks:
        task_id, student_id, name_of_discipline, teacher_id, the_task_for_student, document, group_number, complete = task
        if not complete:
            cursor.execute("""
                UPDATE task_list 
                SET complete = 1 
                WHERE task_id = ?
            """, (task_id,))
            cursor.execute("""
                    SELECT name 
                    FROM student 
                    WHERE student_id = ? """, (student_id,))
            name_student = cursor.fetchall()
            for name in name_student:
                student_name = name[0]
                send_message_ga(teacher_id,
                                f"–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ‚Ññ{task_id}\n{name_of_discipline}\n–ó–ê–î–ê–ù–ò–ï:\n{the_task_for_student}\n–û—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞:{student_name} –≥—Ä—É–ø–ø–∞ {group_number} ")
                bot.send_document(teacher_id, open(f"{document}", "rb"))
                cursor.execute("UPDATE task_list SET name_student = ? WHERE task_id = ?", (student_name, task_id))
            send_message_ga(student_id,
                            f"{name_of_discipline}\n–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {the_task_for_student}\n –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
            cursor.execute("UPDATE task_list SET document = NULL WHERE task_id = ?", (task_id,))
        os.remove(f"{document}")
    conn.commit()
    conn.close()


def send_coment_teacher():
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    now = datetime.now()
    current_time = now.strftime("%H:%M")
    current_date = now.strftime("%d.%m")
    cursor.execute("""
            SELECT task_id, student_id, teacher_id, name_of_discipline, the_task_for_student, send_time, date, group_number, comment, mark
            FROM teacher_comment 
            WHERE send_time = ? AND date = ? """, (current_time, current_date))
    comments = cursor.fetchall()
    for comm in comments:
        task_id, student_id, teacher_id, name_of_discipline, the_task_for_student, send_time, date, group_number, comment, mark = comm
        cursor.execute("""
                SELECT name 
                FROM teachers 
                WHERE teacher_id = ? """, (teacher_id,))
        name_teacher = cursor.fetchall()
        for name in name_teacher:
            teacher_name = name[0]
            send_message_ga(student_id,
                            f"–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø:\n{teacher_name}\n–û—Ü–µ–Ω–∫–∞ {mark} –ø–æ ‚Ññ{task_id}\n{name_of_discipline}\n–ó–ê–î–ê–ù–ò–ï:\n{the_task_for_student}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:{comment} ")
        send_message_ga(teacher_id,
                        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    conn.commit()
    conn.close()


scheduler = BackgroundScheduler()
# –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ check_tasks –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
scheduler.add_job(check_tasks, 'interval', minutes=1)
scheduler.add_job(send_doc, 'interval', minutes=1)
scheduler.add_job(send_doc_for_teacher, 'interval', minutes=1)
scheduler.add_job(send_coment_teacher, 'interval', minutes=1)
scheduler.start()

bot.polling(none_stop=True)



