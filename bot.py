import telebot
from pyexpat.errors import messages
from telebot import types
import create_db
from telegram import Update
from telegram.ext import Updater, CommandHandler, Application, MessageHandler, CallbackContext
from datetime import datetime
import time
import threading
from pytz import utc

from apscheduler.schedulers.background import BackgroundScheduler
import sqlite3
from datetime import datetime


bot = telebot.TeleBot('7206218529:AAGXx1IkHVxZ3IrFt09Xgzytanj1n-bpcUI')

#–ü–†–ò–í–ï–¢–°–í–ò–ï –ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
@bot.message_handler(commands=['start'])
def send_welcome(message):
    create_db.create_db()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
    lastname = message.from_user.last_name
    if lastname is None:
        bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name} üëã –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–¥–∞—á.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
                         , reply_markup= markup)
    else:
        bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name} {lastname} üëã –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–¥–∞—á.\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
                         , reply_markup= markup)

@bot.callback_query_handler(func=lambda callback: True)
def registr(callback):
    if callback.data == "registration" or callback.data == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        bot.send_message(callback.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û")
        bot.register_next_step_handler(callback.message,lambda msg: register_name(msg))
    if callback.data == "–ü–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ" or callback.data == "changing_student":
        bot.send_message(callback.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–µ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å")
        bot.register_next_step_handler(callback.message, lambda msg: nomber_change(msg))
    if callback.data == "–ü–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ " or callback.data == "changing_teacher":
        bot.send_message(callback.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–µ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å")
        bot.register_next_step_handler(callback.message, lambda msg: nomber_change_teacher(msg))

    if callback.data == "–ü–æ–º–µ–Ω—è—Ç—å" or callback.data == "changing":
        bot.send_message(callback.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–µ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å")
        bot.register_next_step_handler(callback.message, lambda msg: nomber_change_discepline(msg))
    if callback.data == "–î–æ–±–∞–≤–∏—Ç—å" or callback.data == "add":
        add_data_to_table_discipline(callback.message)

    if callback.data == "–ü–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ" or callback.data == "changing_group":
        bot.send_message(callback.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–µ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å")
        bot.register_next_step_handler(callback.message, lambda msg: nomber_change_group(msg))
    if callback.data == "–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ" or callback.data == "add_group":
        groap_table(callback.message)


def register_name (message):
    name = message.text
    bot.send_message(message.chat.id, f"{name}, –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å:\n1. –°—Ç—É–¥–µ–Ω—Ç–æ–º –ú–£–ò–í\n2. –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –ú–£–ò–í\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:")
    bot.register_next_step_handler(message, lambda msg: register_student(msg, name, message.chat.id))

#–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –°–¢–£–î–ï–ù–¢–û–í
def register_student(message, name, student_id):
    if message.text == "1":
        #–ü–†–û–í–ï–†–ö–ê –ó–ê–†–ï–ì-–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ò–õ–ò –ù–ï–¢
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (student_id,))
        count = cursor.fetchone()[0]
        if count > 0:
            bot.send_message(message.chat.id, f"{name}, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            changing_student(message,student_id)
        else:
            bot.send_message(message.chat.id, f"{name}, –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å —Å—Ç—É–¥–µ–Ω—Ç–æ–º –ú–£–ò–í, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞—à–µ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")
            bot.register_next_step_handler(message, lambda msg: student_nomber(msg, name, student_id))
    elif message.text == "2":
        print(2)
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (student_id,))
        count = cursor.fetchone()[0]
        if count > 0:
            bot.send_message(message.chat.id, f"{name}, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            changing_teacher(message, student_id)
        else:
            bot.send_message(message.chat.id,f"{name}, –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –ú–£–ò–í, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            bot.register_next_step_handler(message, lambda msg: register_teacher(msg, name, message.chat.id))
    else:
        bot.send_message(message.chat.id, f"{name}, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å:\n1. –°—Ç—É–¥–µ–Ω—Ç–æ–º –ú–£–ò–í\n2. –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –ú–£–ò–í\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:")
        bot.register_next_step_handler(message, lambda msg: register_student(msg, name, student_id))

def student_nomber(message, name, student_id):
    phone_nomber = message.text
    bot.send_message(message.chat.id, f"{name}, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É\n–ü—Ä–∏–º–µ—Ä: plan_it@mail.com")
    bot.register_next_step_handler(message, lambda msg: mail_student (msg, name, student_id, phone_nomber))

def mail_student(message, name, student_id, phone_nomber):
    mail = message.text
    bot.send_message(message.chat.id, f"{name}, –≤–∞—à –ø–æ–ª:\n1. –ú—É–∂—Å–∫–æ–π\n2. –ñ–µ–Ω—Å–∫–∏–π\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É —Å –Ω—É–∂–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º:")
    bot.register_next_step_handler(message, lambda msg: gender_student (msg, name, student_id, phone_nomber, mail))

def gender_student(message, name, student_id, phone_nomber, mail):
    gender = message.text
    if gender == "1" or gender == "2":
        bot.send_message(message.chat.id, f"{name}, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –§–∞–∫—É–ª—å—Ç–µ—Ç\n–ü—Ä–∏–º–µ—Ä: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
        bot.register_next_step_handler(message, lambda msg: faculty_student(msg, name, student_id, phone_nomber, mail, gender))
    else:
        bot.send_message(message.chat.id,
                         f"{name}, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n–≤–∞—à –ø–æ–ª:\n1. –ú—É–∂—Å–∫–æ–π\n2. –ñ–µ–Ω—Å–∫–∏–π\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É —Å –Ω—É–∂–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º:")
        bot.register_next_step_handler(message, lambda msg: gender_student (msg, name, student_id, phone_nomber, mail))

def faculty_student(message, name, student_id, phone_nomber, mail, gender):
    faculty = message.text
    bot.send_message(message.chat.id, f"{name}, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å\n–ü—Ä–∏–º–µ—Ä: 1")
    bot.register_next_step_handler(message, lambda msg: course_student(msg, name, student_id, phone_nomber, mail, gender, faculty))

def course_student(message, name, student_id, phone_nomber, mail, gender, faculty):
    course = message.text
    if course == "1" or course == "2" or course == "3" or course == "4":
        bot.send_message(message.chat.id, f"{name}, —É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã \n–ü—Ä–∏–º–µ—Ä: –ò–î23-3")
        bot.register_next_step_handler(message,lambda msg: group_number(msg, name, student_id, phone_nomber, mail, gender, faculty, course))
    else:
        bot.send_message(message.chat.id,
                         f"{name}, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å\n–ü—Ä–∏–º–µ—Ä: 1")
        bot.register_next_step_handler(message, lambda msg: course_student(msg, name, student_id, phone_nomber, mail, gender, faculty))

def group_number(message, name, student_id, phone_nomber, mail, gender, faculty, course):
    group = message.text
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute('INSERT INTO student (student_id, name, phone_number, mail, gender, faculty, course, group_number) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
                   (student_id, name, phone_nomber, mail, gender, faculty, course, group))
    connection.commit()
    connection.close()
    bot.send_message(message.chat.id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    changing_student(message, student_id)


#–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø
def register_teacher(message, name, teacher_id):
    teacher_phone_nomber = message.text
    bot.send_message(message.chat.id, f"{name}, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É\n–ü—Ä–∏–º–µ—Ä: plan_it@mail.com")
    bot.register_next_step_handler(message, lambda msg: mail_teacher (msg, name, teacher_id, teacher_phone_nomber))

def mail_teacher(message, name, teacher_id, teacher_phone_nomber):
    mail = message.text
    bot.send_message(message.chat.id, f"{name}, –≤–∞—à –ø–æ–ª:\n1. –ú—É–∂—Å–∫–æ–π\n2. –ñ–µ–Ω—Å–∫–∏–π\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É —Å –Ω—É–∂–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º:")
    bot.register_next_step_handler(message, lambda msg: gender_teacher (msg, name, teacher_id, teacher_phone_nomber, mail))

def gender_teacher(message, name, teacher_id, teacher_phone_nomber, mail):
    gender = message.text
    if gender == "1" or gender == "2":
        bot.send_message(message.chat.id, f"{name}, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–∞—Ñ–µ–¥—Ä—ã\n–ü—Ä–∏–º–µ—Ä: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã")
        bot.register_next_step_handler(message, lambda msg: department_teacher(msg, name, teacher_id, teacher_phone_nomber, mail, gender))
    else:
        bot.send_message(message.chat.id,
                         f"{name}, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n–≤–∞—à –ø–æ–ª:\n1. –ú—É–∂—Å–∫–æ–π\n2. –ñ–µ–Ω—Å–∫–∏–π\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É —Å –Ω—É–∂–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º:")
        bot.register_next_step_handler(message, lambda msg: gender_teacher (msg, name, teacher_id, teacher_phone_nomber, mail))

def department_teacher(message, name, teacher_id, teacher_phone_nomber, mail, gender):
    department = message.text
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute('INSERT INTO teachers (teacher_id, name, phone_number, mail, gender, department) VALUES (?, ?, ?, ?, ?, ?)',
                   (teacher_id, name, teacher_phone_nomber, mail, gender, department))
    connection.commit()
    connection.close()
    bot.send_message(message.chat.id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    changing_teacher(message, teacher_id)

#–ò–ó–ú–ï–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –î–õ–Ø –°–¢–£–î–ï–ù–¢–û–í –ò –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ï–ô
def changing_student(message, student_id):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT name, phone_number, mail, faculty, course, group_number FROM student WHERE student_id = ?", (student_id,))
    info_about_student = cursor.fetchall()
    connection.commit()
    connection.close()
    output = "".join(f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n1) –ò–º—è: {info_about_student[i][0]}\n2) –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {info_about_student[i][1]}\n3) –ü–æ—á—Ç–∞: {info_about_student[i][2]}\n4) –§–∞–∫—É–ª—å—Ç–µ—Ç: {info_about_student[i][3]}\n5) –ö—É—Ä—Å: {info_about_student[i][4]}\n6) –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: {info_about_student[i][5]}" for i in range(len(info_about_student)))
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="changing_student"))
    bot.send_message(message.chat.id, output, reply_markup= markup)

def nomber_change(message):
    nomber = message.text
    print(nomber)
    student_id = message.chat.id
    if nomber == "1":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û")
        bot.register_next_step_handler(message, lambda msg: changing_db_student(msg, student_id, nomber))
    elif nomber == "2":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(message, lambda msg: changing_db_student(msg, student_id, nomber))
    elif nomber == "3":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å:")
        bot.register_next_step_handler(message, lambda msg: changing_db_student(msg, student_id, nomber))
    elif nomber == "4":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞:")
        bot.register_next_step_handler(message, lambda msg: changing_db_student(msg, student_id, nomber))
    elif nomber == "5":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞:")
        bot.register_next_step_handler(message, lambda msg: changing_db_student(msg, student_id, nomber))
    elif nomber == "6":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")
        bot.register_next_step_handler(message, lambda msg: changing_db_student(msg, student_id, nomber))
    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
        bot.register_next_step_handler(message, nomber_change)

def changing_db_student(message, student_id, nomber):
    new = message.text
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    if nomber == '1':
        cursor.execute("UPDATE student SET name = ? WHERE student_id= ?", (new, student_id))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –§–ò–û")
        changing_student(message, student_id)
    elif nomber == "2":
        cursor.execute("UPDATE student SET phone_number = ? WHERE student_id= ?", (new, student_id))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        changing_student(message, student_id)
    elif nomber == "3":
        cursor.execute("UPDATE student SET mail = ? WHERE student_id= ?", (new, student_id))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –ø–æ—á—Ç—É")
        changing_student(message, student_id)
    elif nomber == "4":
        cursor.execute("UPDATE student SET faculty = ? WHERE student_id= ?", (new, student_id))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")
        changing_student(message, student_id)
    elif nomber == "5":
        if new == "1" or new == "2" or new == "3" or new == "4":
            cursor.execute("UPDATE student SET course = ? WHERE student_id= ?", (new, student_id))
            connection.commit()
            connection.close()
            bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –∫—É—Ä—Å")
            changing_student(message, student_id)
        else:
            bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å\n–ü—Ä–∏–º–µ—Ä: 1")
            bot.register_next_step_handler(message, lambda msg: changing_db_student(msg, student_id, nomber))
    elif nomber == "6":
        cursor.execute("UPDATE student SET group_number = ? WHERE student_id= ?", (new, student_id))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã")
        changing_student(message, student_id)

def changing_teacher (message, teacher_id):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT name, phone_number, mail, department FROM teachers WHERE teacher_id = ?", (teacher_id,))
    info_about_teacher = cursor.fetchall()
    connection.commit()
    connection.close()
    output = "".join(
        f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n1) –ò–º—è: {info_about_teacher[i][0]}\n2) –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {info_about_teacher[i][1]}\n3) –ü–æ—á—Ç–∞: {info_about_teacher[i][2]}\n4) –ö–∞—Ñ–µ–¥—Ä–∞: {info_about_teacher[i][3]}"
        for i in range(len(info_about_teacher)))
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ ", callback_data="changing_teacher"))
    bot.send_message(message.chat.id, output, reply_markup= markup)

def nomber_change_teacher(message):
    nomber = message.text
    teacher_id = message.chat.id
    if nomber == "1":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û")
        bot.register_next_step_handler(message, lambda msg: changing_db_teacher(msg, teacher_id, nomber))
    elif nomber == "2":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(message, lambda msg: changing_db_teacher(msg, teacher_id, nomber))
    elif nomber == "3":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å:")
        bot.register_next_step_handler(message, lambda msg: changing_db_teacher(msg, teacher_id, nomber))
    elif nomber == "4":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ñ–µ–¥—Ä—ã:")
        bot.register_next_step_handler(message, lambda msg: changing_db_teacher(msg, teacher_id, nomber))
    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–µ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
        bot.register_next_step_handler(message, nomber_change_teacher)

def changing_db_teacher(message, teacher_id, nomber):
    new = message.text
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    if nomber == '1':
        cursor.execute("UPDATE teachers SET name = ? WHERE teacher_id= ?", (new, teacher_id))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –§–ò–û")
        changing_teacher (message, teacher_id)
    if nomber == "2":
        cursor.execute("UPDATE teachers SET phone_number = ? WHERE teacher_id= ?", (new, teacher_id))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        changing_teacher (message, teacher_id)
    if nomber == "3":
        cursor.execute("UPDATE teachers SET mail = ? WHERE teacher_id= ?", (new, teacher_id))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –ø–æ—á—Ç—É")
        changing_teacher (message, teacher_id)
    if nomber == "4":
        cursor.execute("UPDATE teachers SET department = ? WHERE teacher_id= ?", (new, teacher_id))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –∫–∞—Ñ–µ–¥—Ä—É")
        changing_teacher (message, teacher_id)

#–§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
#–î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ï–ú –î–ê–ù–ù–´–• –í –¢–ê–ë–õ–ò–¶–£ –î–ò–°–¶–ò–ü–õ–ò–ù–ê
@bot.message_handler(commands=['add_discipline'])
def add_data_to_table_discipline(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:")
    bot.register_next_step_handler(message, lambda msg: to_table_discipline(msg, message.from_user.id))

def to_table_discipline(message, teacher_id):
    name_discipline = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞:")
    bot.register_next_step_handler(message, lambda msg: to_table_dis(msg, name_discipline, teacher_id))

def to_table_dis(message, name_discipline, teacher_id):
    name_facyltet = message.text
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute('INSERT INTO discipline (name_of_discipline, teacher_id, faculty) VALUES (?, ?, ?)',
                   (name_discipline, teacher_id, name_facyltet))
    connection.commit()
    connection.close()
    bot.send_message(message.chat.id, f"–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞")
    select_data_for_teacher(message, teacher_id)

def select_data_for_teacher(message, teacher_id):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT id, name_of_discipline, faculty FROM discipline WHERE teacher_id = ?", (teacher_id,))
    info_about_discipline = cursor.fetchall()
    connection.commit()
    connection.close()
    output = "".join(
        f"{info_about_discipline[i][0]}) {info_about_discipline[i][1]}, {info_about_discipline[i][2]}\n"
        for i in range(len(info_about_discipline)))
    print(output)
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å", callback_data="changing"))
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å", callback_data="add"))
    bot.send_message(message.chat.id, f"–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:\n{output}", reply_markup=markup)

def nomber_change_discepline(message):
    nomber= message.text
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã")
    bot.register_next_step_handler(message, lambda msg: changing_discepline(msg, nomber))

def changing_discepline(message,  nomber):
    discepline = message.text
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞:")
    bot.register_next_step_handler(message, lambda msg: changing_disceplineee(msg,nomber, discepline))

def changing_disceplineee(message, nomber, discepline):
    name_facyltet = message.text
    nomber = int(nomber)
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT id, name_of_discipline, faculty FROM discipline WHERE id = ?", (nomber,))
    faculty = cursor.fetchall()
    connection.commit()
    connection.close()
    if not faculty:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º. –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    output = "".join(f"{faculty[i][0]}) {faculty[i][1]}\n" for i in range(len(faculty)))
    if output:
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("UPDATE discipline SET name_of_discipline = ?, faculty = ? WHERE id= ?", (discepline, name_facyltet, nomber))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –¥–∞–Ω–Ω—ã–µ.")
        select_data_for_teacher(message, message.chat.id)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.")

@bot.message_handler(commands=['add_group'])
def groap_table(message):
    teacher_id = message.chat.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT id, faculty FROM discipline WHERE teacher_id = ?", (teacher_id,))
    faculty = cursor.fetchall()
    connection.commit()
    connection.close()
    if not faculty:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤.")
        return
    output = "".join(f"{faculty[i][0]}) {faculty[i][1]}\n"for i in range(len(faculty)))
    bot.send_message(message.chat.id, f"–í—ã —Å–æ–∑–¥–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã:\n{output}\n–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–∑–¥–∞—ë—Ç—Å—è –≥—Ä—É–ø–ø–∞:")
    print(output)
    bot.register_next_step_handler(message, lambda msg: to_table_groap(msg, teacher_id, faculty))

def to_table_groap(message, teacher_id, faculty):
    id = int(message.text)
    if any(f[0] == id for f in faculty):
        facultet = faculty[id-1][1]
        bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {facultet}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")
        bot.register_next_step_handler(message, lambda msg: to_groap(msg, teacher_id, facultet))
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, lambda msg: to_table_groap(msg, teacher_id, facultet))

def to_groap(message, teacher_id, facultet):
    group = message.text
    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –∫—É—Ä—Å:")
    bot.register_next_step_handler(message, lambda msg: to_tableee_groap(msg, teacher_id, facultet, group))

def to_tableee_groap(message, teacher_id, facultet, group):
    cyrs = message.text
    if cyrs == "1" or cyrs == "2" or cyrs == "3" or cyrs == "4":
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute('INSERT INTO groups (group_number, faculty, course) VALUES (?, ?, ?)',
                   (group, facultet, cyrs))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å –≤ –Ω–µ—ë –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —Å—Ç—É–¥–µ–Ω—Ç—ã.")
        spisok_grupp(message)
    else:
        bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –£–∫–∞–∂–∏—Ç–µ –∫—É—Ä—Å:")
        bot.register_next_step_handler(message, lambda msg:to_tableee_groap(msg, teacher_id, facultet, group))

def spisok_grupp(message):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute ("SELECT * FROM groups")
    groups = cursor.fetchall()
    connection.commit()
    connection.close()
    output = "".join(f"{groups[i][0]}) {groups[i][1]}, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {groups[i][2]}, –∫—É—Ä—Å: {groups[i][3]}\n" for i in range(len(groups)))
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="changing_group"))
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="add_group"))
    if output:
        bot.send_message(message.chat.id, f"–í—Å–µ –≥—Ä—É–ø–ø—ã:\n{output}", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.")

def nomber_change_group(message):
    nomber= message.text
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")
    bot.register_next_step_handler(message, lambda msg: changing_group(msg, nomber))

def changing_group(message, nomber):
    nomber_group = message.text
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å:")
    bot.register_next_step_handler(message, lambda msg: changing_grouppp(msg, nomber, nomber_group))

def changing_grouppp(message, nomber, nomber_group):
    cyrs = message.text
    if cyrs == "1" or cyrs == "2" or cyrs == "3" or cyrs == "4":
        nomber = int(nomber)
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute ("UPDATE groups SET group_number = ?, course = ? WHERE id= ?", (nomber_group, cyrs, nomber))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–≤—ã –ø–æ–º–µ–Ω—è–ª–∏ –¥–∞–Ω–Ω—ã–µ.")
        spisok_grupp(message)
    else:
        bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –£–∫–∞–∂–∏—Ç–µ –∫—É—Ä—Å:")
        bot.register_next_step_handler(message, lambda msg:changing_grouppp(msg, nomber, nomber_group))

#–î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ô –ù–ï–†–ï–ì–£–õ–Ø–†–ù–û–ô –ó–ê–î–ê–ß–ò
@bot.message_handler(commands=['add_task'])
def new_task(message):
    regular = False
    bot.send_message(message.chat.id, "–ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å?")
    bot.register_next_step_handler(message, lambda msg: whattime(msg, message.from_user.id, regular))

def whattime(message, user_id, regular):
    regular = regular
    task_plan = message.text
    bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è? (–ù–∞–ø—Ä–∏–º–µ—Ä - 13:30)")
    bot.register_next_step_handler(message, lambda msg: save_time(msg, task_plan, user_id, regular))

def save_time(message, task_plan, user_id, regular):
    regular = regular
    what_time = message.text
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Å—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 23 –∏ –º–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59
    try:
        hours, minutes = map(int, what_time.split(':'))
        if 0 <= hours < 24 and 0 <= minutes < 60:
            bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú \n(–ù–∞–ø—Ä–∏–º–µ—Ä - 12.07)")
            bot.register_next_step_handler(message, lambda msg: save_task(msg, task_plan, user_id, what_time, regular))
        else:
            bot.send_message(message.chat.id,
                             f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú \n –ü—Ä–∏–º–µ—Ä (13:30)")
            bot.register_next_step_handler(message, lambda msg: save_time(msg, task_plan, user_id, regular))

    except ValueError:
        bot.send_message(user_id,
                         "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú \n –ü—Ä–∏–º–µ—Ä (13:30)")
        bot.register_next_step_handler(message, lambda msg: save_time(msg, task_plan, user_id))

def save_task(message, task_plan, user_id, what_time, regular):
    date_time = message.text
    regular = regular
    try:
        days, month = map(int, date_time.split('.'))
        print(month, days)
        if 1 <= month <= 12 and 1 <= days < 32:
            connection = sqlite3.connect('my_database.db')
            cursor = connection.cursor()
            cursor.execute('INSERT INTO tasks (user_id, task, task_time, date, regular_task) VALUES (?, ?, ?, ?, ?)',
                           (user_id, task_plan, what_time, date_time, regular))
            connection.commit()
            connection.close()
            bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        else:
            bot.send_message(message.chat.id,
                             f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú \n(–ù–∞–ø—Ä–∏–º–µ—Ä - 12.07)")
            bot.register_next_step_handler(message, lambda msg: save_task(msg, task_plan, user_id, what_time, regular))

    except ValueError:
        bot.send_message(user_id,
                         "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú \n(–ù–∞–ø—Ä–∏–º–µ—Ä - 12.07)")
        bot.register_next_step_handler(message, lambda msg: save_task(msg, task_plan, user_id, what_time, regular))

# –ë–õ–û–ö –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ù–û–í–û–ô –†–ï–ì–£–õ–Ø–†–ù–û–ô –ó–ê–î–ê–ß–ò
@bot.message_handler(commands=['add_regular_task'])
def new_task(message):
    regular = True
    bot.send_message(message.chat.id, "–ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å?")
    bot.register_next_step_handler(message, lambda msg: whattime(msg, message.from_user.id, regular))

#–î–û–°–¢–ê–Å–ú –í–°–ï –ó–ê–î–ê–ß–ò –ò–ó –ë–î
@bot.message_handler(commands=['all_tasks'])
def get_all_tasks_from_db(message):
    user_id = message.from_user.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT task, task_time, date FROM tasks WHERE user_id = ?", (user_id,))
    tasks = cursor.fetchall()
    print(tasks)
    connection.commit()
    connection.close()
    output = "".join(f"{i+1}) {tasks[i][0]} –≤ {tasks[i][1]}, {tasks[i][2]}\n" for i in range(len(tasks)))
    print(output)
    if len(output) != 0:
        bot.send_message(message.chat.id, f"{message.from_user.first_name} {message.from_user.last_name}, –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:")
        bot.send_message(message.chat.id, output)
    else:
        bot.send_message(message.chat.id, f'{message.from_user.first_name} {message.from_user.last_name}, —É –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á:)')

#–£–î–ê–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ò –ò–ó –ë–î
@bot.message_handler(commands=['delete_tasks'])
def delete_task_from_db(message):
    user_id = message.from_user.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT (*) FROM tasks WHERE user_id = ?", (user_id,))
    count = cursor.fetchone() [0]
    if count > 0:
        cursor.execute("SELECT id, task, task_time, date FROM tasks WHERE user_id = ?", (user_id,))
        tasks = cursor.fetchall()
        connection.commit()
        connection.close()
        print(tasks)
        proverka_id = "".join(f"{x[0]} " for x in tasks)
        output = "".join(f"{x[0]} - {x[1]} –≤ {x[2]}, {x[3]}\n" for x in tasks)
        print(output)
        bot.send_message(message.chat.id, f"{message.from_user.first_name} {message.from_user.last_name}, –≤—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:")
        bot.send_message(message.chat.id, output)
        bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")
        bot.register_next_step_handler(message, lambda msg: delete_tasks_from_db(msg, proverka_id))
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á")

def delete_tasks_from_db(message, proverka_id):
    id = message.text
    print(proverka_id)
    print(type(id))
    if id in proverka_id:
        user_id = message.from_user.id
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("DELETE FROM tasks WHERE id = ?", (id,))
        cursor.execute("SELECT COUNT (*) FROM tasks WHERE user_id = ?", (user_id,))
        count = cursor.fetchone()[0]
        if count > 0:
            connection.commit()
            connection.close()
            bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ {id} —É–¥–∞–ª–µ–Ω–∞")
            get_all_tasks_from_db(message)
        else:
            connection.commit()
            connection.close()
            bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ {id} —É–¥–∞–ª–µ–Ω–∞")
            bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç." )
    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç.")

#–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ
def send_message_ga(user_id, message):
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '{message}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

def check_tasks():
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    now = datetime.now()
    current_time = now.strftime("%H:%M")
    current_date = now.strftime("%d.%m")
    # –í—ã–±–æ—Ä–∫–∞ –∑–∞–¥–∞—á —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –¥–∞—Ç–æ–π
    cursor.execute("""
        SELECT id, user_id, task, regular_task 
        FROM tasks 
        WHERE task_time = ? AND date = ?
    """, (current_time, current_date))
    tasks = cursor.fetchall()

    for task in tasks:
        task_id, user_id, message, regular_task = task
        send_message_ga(user_id, message)

        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è, –æ–±–Ω–æ–≤–ª—è–µ–º complete –Ω–∞ True
        if not regular_task:
            cursor.execute("""
                UPDATE tasks 
                SET complete = 1 
                WHERE id = ?
            """, (task_id,))

    conn.commit()
    conn.close()

scheduler = BackgroundScheduler()
# –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ check_tasks –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
scheduler.add_job(check_tasks, 'interval', minutes=1)
scheduler.start()


bot.polling(none_stop=True)



