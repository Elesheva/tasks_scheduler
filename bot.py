import os
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
import telebot
from telebot import types
import create_db
from apscheduler.schedulers.background import BackgroundScheduler
import sqlite3
from datetime import datetime, timedelta
from docx import Document
bot = telebot.TeleBot('7206218529:AAGXx1IkHVxZ3IrFt09Xgzytanj1n-bpcUI')


# –ü–†–ò–í–ï–¢–°–í–ò–ï –ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
@bot.message_handler(commands=['start'])
def send_welcome(message):
    create_db.create_db()
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
    lastname = message.from_user.last_name
    if lastname is None:
        bot.send_message(message.chat.id,
                         f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.chat.first_name} üëã –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–¥–∞—á.\n"
                         f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
                         , reply_markup=markup)
    else:
        bot.send_message(message.chat.id,
                         f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.chat.first_name} {lastname} üëã –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–¥–∞—á.\n"
                         f"–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é."
                         , reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: True)
def registr(callback):
    if callback.data == "registration" or callback.data == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û")
        bot.register_next_step_handler(callback.message, lambda msg: register_name(msg))
    if callback.data == "–ü–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ" or callback.data == "changing_student":
        bot.send_message(callback.message.chat.id,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
        bot.register_next_step_handler(callback.message, lambda msg: nomber_change(msg))
    if callback.data == "–ü–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ " or callback.data == "changing_teacher":
        bot.send_message(callback.message.chat.id,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
        bot.register_next_step_handler(callback.message, lambda msg: nomber_change_teacher(msg))

    if callback.data == "–ü–æ–º–µ–Ω—è—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã" or callback.data == "changing":
        bot.send_message(callback.message.chat.id,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
        bot.register_next_step_handler(callback.message, lambda msg: nomber_change_discepline(msg))
    if callback.data == "–î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É" or callback.data == "add":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
        add_data_to_table_discipline(callback.message)

    if callback.data == "–ü–æ–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—É" or callback.data == "changing_group":
        bot.send_message(callback.message.chat.id,"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
        bot.register_next_step_handler(callback.message, lambda msg: nomber_change_group(msg))
    if callback.data == "–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É" or callback.data == "add_group":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–û–±—Ä–∞–±–æ—Ç–∫–∞...")
        groap_table(callback.message)

    if callback.data == "delete":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–û–±—Ä–∞–±–æ—Ç–∫–∞...")
        statys = 1
        delete_user(callback.message, callback.message.chat.id, statys)
    if callback.data == "deletee":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–û–±—Ä–∞–±–æ—Ç–∫–∞...")
        statys = 2
        delete_user(callback.message, callback.message.chat.id, statys)
    if callback.data == "ne_delete":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–ü—Ä–∏–Ω—è—Ç–æ.")


    if callback.data == "send_completed_task":
        bot.send_message(callback.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:")
        bot.register_next_step_handler(callback.message,
                                       lambda msg: send_task_for_teacher(msg, callback.message.chat.id))

    if callback.data == "statystic":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è")
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute(
            "SELECT id, name_of_discipline, group_number, the_task_for_student, send_time, send_date FROM task_for_student WHERE teacher_id = ? AND statys = 1 ",
            (callback.message.chat.id,))
        info_send_task = cursor.fetchall()
        connection.commit()
        connection.close()
        if info_send_task:
            output = "".join(
                f"\n{info_send_task[i][0]}) {info_send_task[i][2]} {info_send_task[i][1]}\n–ó–∞–¥–∞—á–∞:\n{info_send_task[i][3]}\n–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {info_send_task[i][4]} {info_send_task[i][5]}"
                for i in
                range(len(info_send_task)))
            bot.send_message(callback.message.chat.id,
                             f"{output}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:")
            bot.register_next_step_handler(callback.message,
                                           lambda msg: statystics(msg, callback.message.chat.id))
    if callback.data == "send_mark":
        bot.send_message(callback.message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É:")
        bot.register_next_step_handler(callback.message,
                                       lambda msg: send_comment(msg, callback.message.chat.id))

    if callback.data.startswith("neyd"):
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–ó–∞–ø–∏—Å–∞–Ω–æ.")
        perems_str = callback.data[4:]
        perems = perems_str.split('-')
        mark = 2
        bot.send_message(callback.message.chat.id,
                         "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ:")
        bot.register_next_step_handler(callback.message,
                                       lambda msg: ocenka(msg, callback.message.chat.id, mark, perems[0], perems[1]))
    if callback.data.startswith("ydovletvoritelno"):
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–ó–∞–ø–∏—Å–∞–Ω–æ.")
        perems_str = callback.data[16:]
        perems = perems_str.split('-')
        mark = 3
        bot.send_message(callback.message.chat.id,
                         "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ:")
        bot.register_next_step_handler(callback.message,
                                       lambda msg: ocenka(msg, callback.message.chat.id, mark, perems[0], perems[1]))
    if callback.data.startswith("horosho"):
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–ó–∞–ø–∏—Å–∞–Ω–æ.")
        perems_str = callback.data[7:]
        perems = perems_str.split('-')
        mark = 4
        bot.send_message(callback.message.chat.id,
                         "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ:")
        bot.register_next_step_handler(callback.message,
                                       lambda msg: ocenka(msg, callback.message.chat.id, mark, perems[0], perems[1]))
    if callback.data.startswith("otlichno"):
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–ó–∞–ø–∏—Å–∞–Ω–æ.")
        perems_str = callback.data[8:]
        perems = perems_str.split('-')
        mark = 5
        bot.send_message(callback.message.chat.id,
                         "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ:")
        bot.register_next_step_handler(callback.message,
                                       lambda msg: ocenka(msg, callback.message.chat.id, mark, perems[0], perems[1]))

    if callback.data == "change_parol_teacher":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
        bot.register_next_step_handler(callback.message,
                                       lambda msg: change_parol_teacher(msg, callback.message.chat.id))
    if callback.data == "change_parol_student":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
        bot.register_next_step_handler(callback.message,
                                       lambda msg: change_parol_student(msg, callback.message.chat.id))

    if callback.data == "done":
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.")
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("""                
                        UPDATE statystic_for_student 
                        SET complete = complete + 1, dont_complete = dont_complete - 1
                        WHERE student_id = ?""", (callback.message.chat.id,))
        connection.commit()
        connection.close()

    if callback.data == "dont_done":
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫–∏
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.")

    if callback.data == "all_statystic":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute(
            "SELECT name_of_discipline FROM discipline WHERE teacher_id = ?",
            (callback.message.chat.id,))
        discipline = cursor.fetchall()
        connection.commit()
        connection.close()
        if discipline:
            output = "".join(
                f"\n{i+1}) {discipline[i][0]} "
                for i in
                range(len(discipline)))
            bot.send_message(callback.message.chat.id,
                             f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:\n{output}")
            bot.register_next_step_handler(callback.message,
                                           lambda msg: all_statystic(msg, callback.message.chat.id, discipline))
    if callback.data == "time":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        regular = False
        statys = 1
        send = "time"
        bot.send_message(callback.message.chat.id, "–ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å? –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        bot.register_next_step_handler(callback.message, lambda msg: whattime(msg, callback.message.chat.id, regular, statys, send))

    if callback.data == "now":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        regular = False
        statys = 1
        send = "now"
        bot.send_message(callback.message.chat.id, "–ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å? –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
        bot.register_next_step_handler(callback.message, lambda msg: whattime(msg, callback.message.chat.id, regular, statys, send))
#–ù–ê–°–¢–†–û–ô–ö–ò
    if callback.data == "changing_settings_student":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        changing_student(callback.message, callback.message.chat.id)
    if callback.data == "changing_settings_teacher":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        changing_teacher(callback.message, callback.message.chat.id)

    if callback.data == "delete_account":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        delete_zapis(callback.message)

    if callback.data == "all_discipline":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        select_data_for_teacher(callback.message, callback.message.chat.id)

    if callback.data == "all_grupp":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        spisok_grupp(callback.message)

    if callback.data == "info_about_student":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        info(callback.message)

    if callback.data == "change_parol":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        change_parol(callback.message)

    if callback.data == "text_for_admin":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –í –æ–±—Ä–∞—â–µ–Ω–∏–∏ –≤–∞–º –Ω—É–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –∏–∑–ª–æ–∂–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –±—ã—Å—Ç—Ä–µ–µ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç:")
        bot.register_next_step_handler(callback.message,
                                       lambda msg: for_admin(msg))

#–ó–ê–î–ê–ß–ò
    if callback.data == "add_task":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        text = "add_task"
        new_task(callback.message, text)

    if callback.data == "add_regular_task":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        text = "add_regular_task"
        new_task(callback.message, text)

    if callback.data == "all_tasks":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        get_all_tasks_from_db(callback.message)

    if callback.data == "task_from_the_teacher":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        task_list(callback.message)

    if callback.data == "delete_tasks":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        delete_task_from_db(callback.message)

    if callback.data == "send_markk":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        complete_task(callback.message)

    if callback.data == "send_message_for_student":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        send_message_for_student(callback.message)

    if callback.data == "user_text":
        bot.edit_message_text(chat_id=callback.message.chat.id,
                              message_id=callback.message.message_id,
                              text="–í–∞—à –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...")
        obrashenya_ot_user(callback.message)

    if callback.data == "otvet_for_user":
        bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ–±—Ä–∞—â–µ–Ω–∏—è:")
        bot.register_next_step_handler(callback.message,
                                       lambda msg: otvet_user(msg))

def register_name(message):
    name = message.text
    bot.send_message(message.chat.id,
                     f"{name}, –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å:\n1. –°—Ç—É–¥–µ–Ω—Ç–æ–º –ú–£–ò–í\n2. –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –ú–£–ò–í\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:")
    bot.register_next_step_handler(message, lambda msg: register_student(msg, name, message.chat.id))

# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –°–¢–£–î–ï–ù–¢–û–í
def register_student(message, name, student_id):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (student_id,))
    teacher = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (student_id,))
    count = cursor.fetchone()[0]
    if message.text == "1":
        status = 1
        # –ü–†–û–í–ï–†–ö–ê –ó–ê–†–ï–ì-–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ò–õ–ò –ù–ï–¢
        if count > 0 and teacher == 0:
            bot.send_message(message.chat.id, f"{name}, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            changing_student(message, student_id)
        elif count == 0 and teacher > 0:
            bot.send_message(message.chat.id, f"{name}, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            changing_teacher(message, student_id)
        elif count > 0 and teacher > 0:
            bot.send_message(message.chat.id, f"{name}, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        elif count == 0 and teacher == 0:
            bot.send_message(student_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
            bot.register_next_step_handler(message, lambda msg: proverka_parol(msg, name, student_id, status))
    elif message.text == "2":
        status = 2
        # –ü–†–û–í–ï–†–ö–ê –ó–ê–†–ï–ì-–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ò–õ–ò –ù–ï–¢
        if count > 0 and teacher == 0:
            bot.send_message(message.chat.id, f"{name}, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            changing_student(message, student_id)
        elif count == 0 and teacher > 0:
            bot.send_message(message.chat.id, f"{name}, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            changing_teacher(message, student_id)
        elif count > 0 and teacher > 0:
            bot.send_message(message.chat.id, f"{name}, –≤—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        elif count == 0 and teacher == 0:
            bot.send_message(student_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
            bot.register_next_step_handler(message, lambda msg: proverka_parol(msg, name, student_id, status))
    else:
        bot.send_message(message.chat.id,
                         f"{name}, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.\n–í—ã —è–≤–ª—è–µ—Ç–µ—Å—å:\n1. –°—Ç—É–¥–µ–Ω—Ç–æ–º –ú–£–ò–í\n2. –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –ú–£–ò–í\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä:")
        bot.register_next_step_handler(message, lambda msg: register_student(msg, name, student_id))

def proverka_parol(message, name, student_id, status):
    parol = message.text
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    if status == 1:
        cursor.execute("SELECT COUNT (*) FROM parol WHERE parol_for_student = ?",
                       (parol,))
        student_parol = cursor.fetchone()[0]
        if student_parol > 0:
            bot.send_message(message.chat.id,
                             f"{name}, –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å —Å—Ç—É–¥–µ–Ω—Ç–æ–º –ú–£–ò–í, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤–∞—à–µ–º—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")
            bot.register_next_step_handler(message, lambda msg: student_nomber(msg, name, student_id))
        else:
            bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            bot.register_next_step_handler(message, lambda msg: proverka_parol(msg, name, student_id, status))

    if status == 2:
        cursor.execute("SELECT COUNT (*) FROM parol WHERE parol_for_teacher = ?",
                       (parol,))
        teacher_parol = cursor.fetchone()[0]
        if teacher_parol > 0:
            bot.send_message(message.chat.id,
                             f"{name}, –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –ú–£–ò–í, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
            bot.register_next_step_handler(message, lambda msg: register_teacher(msg, name, message.chat.id))
        else:
            bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
            bot.register_next_step_handler(message, lambda msg: proverka_parol(msg, name, student_id, status))

def student_nomber(message, name, student_id):
    phone_nomber = message.text
    bot.send_message(message.chat.id, f"{name}, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É\n–ü—Ä–∏–º–µ—Ä: plan_it@mail.com")
    bot.register_next_step_handler(message, lambda msg: mail_student(msg, name, student_id, phone_nomber))


def mail_student(message, name, student_id, phone_nomber):
    mail = message.text
    bot.send_message(message.chat.id, f"{name}, –≤–∞—à –ø–æ–ª:\n1. –ú—É–∂—Å–∫–æ–π\n2. –ñ–µ–Ω—Å–∫–∏–π\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É —Å –Ω—É–∂–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º:")
    bot.register_next_step_handler(message, lambda msg: gender_student(msg, name, student_id, phone_nomber, mail))


def gender_student(message, name, student_id, phone_nomber, mail):
    gender = message.text
    if gender == "1" or gender == "2":
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("SELECT DISTINCT faculty FROM discipline")
        info_about_faculty = cursor.fetchall()
        connection.commit()
        connection.close()
        output = "".join(
            f"{i+1}) {info_about_faculty[i][0]}\n"
            for i in range(len(info_about_faculty)))
        bot.send_message(message.chat.id, f"{name}, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –§–∞–∫—É–ª—å—Ç–µ—Ç:\n{output} ")
        bot.register_next_step_handler(message,
                                       lambda msg: faculty_student(msg, name, student_id, phone_nomber, mail, gender,
                                                                   info_about_faculty))
    else:
        bot.send_message(message.chat.id,
                         f"{name}, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n–≤–∞—à –ø–æ–ª:\n1. –ú—É–∂—Å–∫–æ–π\n2. –ñ–µ–Ω—Å–∫–∏–π\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É —Å –Ω—É–∂–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º:")
        bot.register_next_step_handler(message, lambda msg: gender_student(msg, name, student_id, phone_nomber, mail))


def faculty_student(message, name, student_id, phone_nomber, mail, gender, info_about_faculty):
    try:
        nomber = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message,
                                       lambda msg: faculty_student(msg, name, student_id, phone_nomber, mail, gender,
                                                                   info_about_faculty))
        return
    have = False
    for i in range(len(info_about_faculty)):
            have = True
            faculty = info_about_faculty[i][nomber - 1]
            bot.send_message(message.chat.id, f"{name}, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å\n–ü—Ä–∏–º–µ—Ä: 1")
            bot.register_next_step_handler(message,
                                           lambda msg: course_student(msg, name, student_id, phone_nomber, mail, gender,
                                                                      faculty))
    if not have:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message,
                                       lambda msg: faculty_student(msg, name, student_id, phone_nomber, mail, gender,
                                                                   info_about_faculty))


def course_student(message, name, student_id, phone_nomber, mail, gender, faculty):
    course = message.text
    if course == "1" or course == "2" or course == "3" or course == "4":
        course = int(message.text)
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("SELECT id, group_number, faculty, course FROM groups WHERE faculty = ? AND course = ? ",
                       (faculty, course))
        info_about_faculty = cursor.fetchall()
        connection.commit()
        connection.close()
        output = "".join(
            f"{info_about_faculty[i][0]}) {info_about_faculty[i][1]}, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {info_about_faculty[i][2]}, –∫—É—Ä—Å: {info_about_faculty[i][3]}\n"
            for i in range(len(info_about_faculty)))
        if info_about_faculty:
            bot.send_message(message.chat.id, f"{name}, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:\n{output} ")
            bot.register_next_step_handler(message,
                                           lambda msg: group_number(msg, name, student_id, phone_nomber, mail, gender,
                                                                    faculty, course, info_about_faculty))
        else:
            bot.send_message(message.chat.id, f"{name}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥—Ä—É–ø–ø–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.")
    else:
        bot.send_message(message.chat.id,
                         f"{name}, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å.\n–ü—Ä–∏–º–µ—Ä: 1")
        bot.register_next_step_handler(message,
                                       lambda msg: course_student(msg, name, student_id, phone_nomber, mail, gender,
                                                                  faculty))


def group_number(message, name, student_id, phone_nomber, mail, gender, faculty, course, info_about_faculty):
    try:
        nomber = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id,
                         f"{name}, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:")
        bot.register_next_step_handler(message,
                                       lambda msg: group_number(msg, name, student_id, phone_nomber, mail, gender,
                                                                faculty, course, info_about_faculty))
        return

    have = False
    for i in range(len(info_about_faculty)):
        if info_about_faculty[i][0] == nomber:
            have = True
            group = info_about_faculty[i][1]
            connection = sqlite3.connect('my_database.db')
            cursor = connection.cursor()
            cursor.execute(
                'INSERT INTO student (student_id, name, phone_number, mail, gender, faculty, course, group_number) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
                (student_id, name, phone_nomber, mail, gender, faculty, course, group))
            connection.commit()
            connection.close()
            bot.send_message(message.chat.id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
            changing_student(message, student_id)
    if not have:
        bot.send_message(message.chat.id,
                         f"{name}, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É:")
        bot.register_next_step_handler(message,
                                       lambda msg: group_number(msg, name, student_id, phone_nomber, mail, gender,
                                                                faculty, course, info_about_faculty))


# –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø
def register_teacher(message, name, teacher_id):
    teacher_phone_nomber = message.text
    bot.send_message(message.chat.id, f"{name}, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É\n–ü—Ä–∏–º–µ—Ä: plan_it@mail.com")
    bot.register_next_step_handler(message, lambda msg: mail_teacher(msg, name, teacher_id, teacher_phone_nomber))


def mail_teacher(message, name, teacher_id, teacher_phone_nomber):
    mail = message.text
    bot.send_message(message.chat.id, f"{name}, –≤–∞—à –ø–æ–ª:\n1. –ú—É–∂—Å–∫–æ–π\n2. –ñ–µ–Ω—Å–∫–∏–π\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É —Å –Ω—É–∂–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º:")
    bot.register_next_step_handler(message,
                                   lambda msg: gender_teacher(msg, name, teacher_id, teacher_phone_nomber, mail))


def gender_teacher(message, name, teacher_id, teacher_phone_nomber, mail):
    gender = message.text
    if gender == "1" or gender == "2":
        bot.send_message(message.chat.id, f"{name}, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–∞—Ñ–µ–¥—Ä—ã\n–ü—Ä–∏–º–µ—Ä: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã")
        bot.register_next_step_handler(message,
                                       lambda msg: department_teacher(msg, name, teacher_id, teacher_phone_nomber, mail,
                                                                      gender))
    else:
        bot.send_message(message.chat.id,
                         f"{name}, –≤—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ\n–≤–∞—à –ø–æ–ª:\n1. –ú—É–∂—Å–∫–æ–π\n2. –ñ–µ–Ω—Å–∫–∏–π\n–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É —Å –Ω—É–∂–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º:")
        bot.register_next_step_handler(message,
                                       lambda msg: gender_teacher(msg, name, teacher_id, teacher_phone_nomber, mail))


def department_teacher(message, name, teacher_id, teacher_phone_nomber, mail, gender):
    department = message.text
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute(
        'INSERT INTO teachers (teacher_id, name, phone_number, mail, gender, department) VALUES (?, ?, ?, ?, ?, ?)',
        (teacher_id, name, teacher_phone_nomber, mail, gender, department))
    connection.commit()
    connection.close()
    bot.send_message(message.chat.id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    changing_teacher(message, teacher_id)


# –ò–ó–ú–ï–ù–ï–ù–ò–ï –î–ê–ù–ù–´–• –î–õ–Ø –°–¢–£–î–ï–ù–¢–û–í –ò –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ï–ô
def changing_student(message, student_id):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT name, phone_number, mail, faculty, course, group_number FROM student WHERE student_id = ?",
                   (student_id,))
    info_about_student = cursor.fetchall()
    connection.commit()
    connection.close()
    output = "".join(
        f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n1) –ò–º—è: {info_about_student[i][0]}\n2) –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {info_about_student[i][1]}\n3) –ü–æ—á—Ç–∞: {info_about_student[i][2]}\n4) –§–∞–∫—É–ª—å—Ç–µ—Ç: {info_about_student[i][3]}\n5) –ö—É—Ä—Å: {info_about_student[i][4]}\n6) –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: {info_about_student[i][5]}"
        for i in range(len(info_about_student)))
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="changing_student"))
    bot.send_message(message.chat.id, output, reply_markup=markup)


def nomber_change(message):
    nomber = message.text
    print(nomber)
    student_id = message.chat.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT id, faculty FROM discipline")
    info_about_faculty = cursor.fetchall()
    connection.commit()
    connection.close()
    if nomber == "1":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û")
        bot.register_next_step_handler(message,
                                       lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))
    elif nomber == "2":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(message,
                                       lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))
    elif nomber == "3":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å:")
        bot.register_next_step_handler(message,
                                       lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))
    elif nomber == "4":
        output = "".join(
            f"{info_about_faculty[i][0]}) {info_about_faculty[i][1]}\n"
            for i in range(len(info_about_faculty)))
        bot.send_message(message.chat.id, f"–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –§–∞–∫—É–ª—å—Ç–µ—Ç:\n{output} ")
        bot.register_next_step_handler(message,
                                       lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))
    elif nomber == "5":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫—É—Ä—Å–∞:")
        bot.register_next_step_handler(message,
                                       lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))
    elif nomber == "6":
        try:
            connection = sqlite3.connect('my_database.db')
            cursor = connection.cursor()
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–µ
            cursor.execute("SELECT faculty, course FROM student WHERE student_id = ?", (student_id,))
            info_about_student = cursor.fetchall()
            if not info_about_student:
                bot.send_message(message.chat.id, "–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            for i in range(len(info_about_student)):
                faculty = info_about_student[i][0]
                course = info_about_student[i][1]
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–∞—Ö
                cursor.execute("SELECT id, group_number, faculty, course FROM groups WHERE faculty = ? AND course = ?",
                               (faculty, course))
                info_about_faculty = cursor.fetchall()
            if not info_about_faculty:
                bot.send_message(message.chat.id, "–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            output = "".join(
                f"{info_about_faculty[i][0]}) {info_about_faculty[i][1]}, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {info_about_faculty[i][2]}, –∫—É—Ä—Å: {info_about_faculty[i][3]}\n"
                for i in range(len(info_about_faculty)))
            bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:\n{output}")
            bot.register_next_step_handler(message,
                                           lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))

        except Exception as e:
            bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        finally:
            if 'connection' in locals():
                connection.close()
    else:
        bot.send_message(message.chat.id,
                         "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
        bot.register_next_step_handler(message, nomber_change)



def changing_db_student(message, student_id, nomber, info_about_faculty):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    if nomber == '1':
        new = message.text
        cursor.execute("UPDATE student SET name = ? WHERE student_id= ?", (new, student_id))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –§–ò–û")
        changing_student(message, student_id)
    elif nomber == "2":
        new = message.text
        cursor.execute("UPDATE student SET phone_number = ? WHERE student_id= ?", (new, student_id))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        changing_student(message, student_id)
    elif nomber == "3":
        new = message.text
        cursor.execute("UPDATE student SET mail = ? WHERE student_id= ?", (new, student_id))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –ø–æ—á—Ç—É")
        changing_student(message, student_id)
    elif nomber == "4":
        try:
            new = int(message.text)
        except ValueError:
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞.")
            bot.register_next_step_handler(message,
                                           lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))
            return

        have = False
        for i in range(len(info_about_faculty)):
            if info_about_faculty[i][0] == new:
                have = True
                faculty = info_about_faculty[i][1]
                cursor.execute("UPDATE student SET faculty = ? WHERE student_id= ?", (faculty, student_id))
                connection.commit()
                connection.close()
                bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç")
                changing_student(message, student_id)

        if not have:
            bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ñ–∞–∫—É–ª—å—Ç–µ—Ç:")
            bot.register_next_step_handler(message,
                                           lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))

    elif nomber == "5":
        new = message.text
        if new == "1" or new == "2" or new == "3" or new == "4":
            cursor.execute("UPDATE student SET course = ? WHERE student_id= ?", (new, student_id))
            connection.commit()
            connection.close()
            bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –∫—É—Ä—Å")
            changing_student(message, student_id)
        else:
            bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫—É—Ä—Å\n–ü—Ä–∏–º–µ—Ä: 1")
            bot.register_next_step_handler(message,
                                           lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))
    elif nomber == "6":
        try:
            new = int(message.text)
        except ValueError:
            bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É:")
            bot.register_next_step_handler(message,
                                           lambda msg: changing_db_student(msg, student_id, nomber, info_about_faculty))
            return
        have = False
        for i in range(len(info_about_faculty)):
            if info_about_faculty[i][0] == new:
                have = True
                groupp = info_about_faculty[i][1]
                cursor.execute("UPDATE student SET group_number = ? WHERE student_id= ?", (groupp, student_id))
                connection.commit()
                connection.close()
                bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã")
                changing_student(message, student_id)
        if not have:
            bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, —É–∫–∞–∂–∏—Ç–µ –≥—Ä—É–ø–ø—É:")
            bot.register_next_step_handler(message,
                                           lambda msg: changing_db_student(msg, student_id, nomber,
                                                                           info_about_faculty))


def changing_teacher(message, teacher_id):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT name, phone_number, mail, department FROM teachers WHERE teacher_id = ?", (teacher_id,))
    info_about_teacher = cursor.fetchall()
    connection.commit()
    connection.close()
    output = "".join(
        f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n1) –ò–º—è: {info_about_teacher[i][0]}\n2) –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {info_about_teacher[i][1]}\n3) –ü–æ—á—Ç–∞: {info_about_teacher[i][2]}\n4) –ö–∞—Ñ–µ–¥—Ä–∞: {info_about_teacher[i][3]}"
        for i in range(len(info_about_teacher)))
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ ", callback_data="changing_teacher"))
    bot.send_message(message.chat.id, output, reply_markup=markup)


def nomber_change_teacher(message):
    nomber = message.text
    teacher_id = message.chat.id
    if nomber == "1":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û")
        bot.register_next_step_handler(message, lambda msg: changing_db_teacher(msg, teacher_id, nomber))
    elif nomber == "2":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
        bot.register_next_step_handler(message, lambda msg: changing_db_teacher(msg, teacher_id, nomber))
    elif nomber == "3":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å:")
        bot.register_next_step_handler(message, lambda msg: changing_db_teacher(msg, teacher_id, nomber))
    elif nomber == "4":
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ñ–µ–¥—Ä—ã:")
        bot.register_next_step_handler(message, lambda msg: changing_db_teacher(msg, teacher_id, nomber))
    else:
        bot.send_message(message.chat.id,
                         "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–µ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
        bot.register_next_step_handler(message, nomber_change_teacher)


def changing_db_teacher(message, teacher_id, nomber):
    new = message.text
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    if nomber == '1':
        cursor.execute("UPDATE teachers SET name = ? WHERE teacher_id= ?", (new, teacher_id))
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –§–ò–û")
        connection.commit()
        changing_teacher(message, teacher_id)
    if nomber == "2":
        cursor.execute("UPDATE teachers SET phone_number = ? WHERE teacher_id= ?", (new, teacher_id))
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
        connection.commit()
        changing_teacher(message, teacher_id)
    if nomber == "3":
        cursor.execute("UPDATE teachers SET mail = ? WHERE teacher_id= ?", (new, teacher_id))
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –ø–æ—á—Ç—É")
        connection.commit()
        changing_teacher(message, teacher_id)
    if nomber == "4":
        cursor.execute("UPDATE teachers SET department = ? WHERE teacher_id= ?", (new, teacher_id))
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –∫–∞—Ñ–µ–¥—Ä—É")
        connection.commit()
        changing_teacher(message, teacher_id)
    connection.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
# –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ï–ú –î–ê–ù–ù–´–• –í –¢–ê–ë–õ–ò–¶–£ –î–ò–°–¶–ò–ü–õ–ò–ù–ê

def add_data_to_table_discipline(message):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (message.chat.id,))
    teacher = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (message.chat.id,))
    student = cursor.fetchone()[0]
    # –ü–†–û–í–ï–†–ö–ê –ó–ê–†–ï–ì-–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ò–õ–ò –ù–ï–¢
    if student > 0 and teacher == 0:
        bot.send_message(message.chat.id, f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç. –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.")
    elif student == 0 and teacher > 0:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:")
        bot.register_next_step_handler(message, lambda msg: to_table_discipline(msg, message.chat.id))
    elif student > 0 and teacher > 0:
        bot.send_message(message.chat.id, f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.")
    elif student == 0 and teacher == 0:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
        bot.send_message(message.chat.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. ", reply_markup = markup)
    connection.commit()
    connection.close()


def to_table_discipline(message, teacher_id):
    name_discipline = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞:")
    bot.register_next_step_handler(message, lambda msg: to_table_dis(msg, name_discipline, teacher_id))


def to_table_dis(message, name_discipline, teacher_id):
    name_facyltet = message.text
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute('INSERT INTO discipline (name_of_discipline, teacher_id, faculty) VALUES (?, ?, ?)',
                   (name_discipline, teacher_id, name_facyltet))
    connection.commit()
    connection.close()
    bot.send_message(message.chat.id, f"–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞")
    select_data_for_teacher(message, teacher_id)


# –í–´–í–û–î–ò–ú –°–ü–ò–°–û–ö –í–°–ï–• –î–ò–°–¶–ò–ü–õ–ò–ù
def select_data_for_teacher(message, teacher_id):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT id, name_of_discipline, faculty FROM discipline WHERE teacher_id = ?", (teacher_id,))
    info_about_discipline = cursor.fetchall()
    connection.commit()
    connection.close()
    if len(info_about_discipline) > 0 :
        output = "".join(
            f"{info_about_discipline[i][0]}) {info_about_discipline[i][1]}, {info_about_discipline[i][2]}\n"
            for i in range(len(info_about_discipline)))
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã", callback_data="changing"))
        markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É", callback_data="add"))
        bot.send_message(message.chat.id, f"–î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:\n{output}", reply_markup=markup)
    else:
        bot.send_message(teacher_id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∏—Å—Ü–∏–ø–ª–∏–Ω.")


# –ú–ï–ù–Ø–ï–ú –ù–ê–ó–í–ê–ù–ò–ï –î–ò–°–¶–ò–ü–õ–ò–ù–´
def nomber_change_discepline(message):
    nomber = message.text
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã")
    bot.register_next_step_handler(message, lambda msg: changing_discepline(msg, nomber))


def changing_discepline(message, nomber):
    discepline = message.text
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞:")
    bot.register_next_step_handler(message, lambda msg: changing_disceplineee(msg, nomber, discepline))


def changing_disceplineee(message, nomber, discepline):
    name_facyltet = message.text
    nomber = int(nomber)
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT id, name_of_discipline, faculty FROM discipline WHERE id = ?", (nomber,))
    faculty = cursor.fetchall()
    connection.commit()
    connection.close()
    if not faculty:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º. –í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ")
        return
    output = "".join(f"{faculty[i][0]}) {faculty[i][1]}\n" for i in range(len(faculty)))
    if output:
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("UPDATE discipline SET name_of_discipline = ?, faculty = ? WHERE id= ?",
                       (discepline, name_facyltet, nomber))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–í—ã –ø–æ–º–µ–Ω—è–ª–∏ –¥–∞–Ω–Ω—ã–µ.")
        select_data_for_teacher(message, message.chat.id)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.")


# –î–û–ë–ê–í–õ–Ø–ï–ú –ì–†–£–ü–ü–£

def groap_table(message):
    teacher_id = message.chat.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (message.chat.id,))
    teacher = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (message.chat.id,))
    student = cursor.fetchone()[0]
    # –ü–†–û–í–ï–†–ö–ê –ó–ê–†–ï–ì-–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ò–õ–ò –ù–ï–¢
    if student > 0 and teacher == 0:
        bot.send_message(message.chat.id, f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç. –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.")
    elif student == 0 and teacher > 0:
        cursor.execute("SELECT DISTINCT faculty FROM discipline WHERE teacher_id = ?", (teacher_id,))
        faculty = cursor.fetchall()
        if not faculty:
            bot.send_message(message.chat.id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤.")
            return
        output = "".join(f"{i+1}) {faculty[i][0]}\n" for i in range(len(faculty)))
        bot.send_message(message.chat.id,
                         f"–í—ã —Å–æ–∑–¥–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã:\n{output}\n–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–∑–¥–∞—ë—Ç—Å—è –≥—Ä—É–ø–ø–∞:")
        bot.register_next_step_handler(message, lambda msg: to_table_groap(msg, teacher_id, faculty))
    elif student > 0 and teacher > 0:
        bot.send_message(message.chat.id,
                         f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.")
    elif student == 0 and teacher == 0:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
        bot.send_message(message.chat.id,
                         "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. ",
                         reply_markup=markup)
    connection.commit()
    connection.close()


def to_table_groap(message, teacher_id, faculty):
    try:
        id = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞.")
        bot.register_next_step_handler(message, lambda msg: to_table_groap(msg, teacher_id, faculty))
        return
    have = False
    for i in range(len(faculty)):
        have = True
        facultet = faculty[i][id - 1]
        bot.send_message(message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {facultet}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")
        bot.register_next_step_handler(message, lambda msg, f=facultet: to_groap(msg, teacher_id, f))
    if not have:
        # –ï—Å–ª–∏ –º—ã –≤—ã—à–ª–∏ –∏–∑ —Ü–∏–∫–ª–∞ –±–µ–∑ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        bot.register_next_step_handler(message, lambda msg: to_table_groap(msg, teacher_id, faculty))


def to_groap(message, teacher_id, facultet):
    group = message.text
    bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –∫—É—Ä—Å:")
    bot.register_next_step_handler(message, lambda msg: to_tableee_groap(msg, teacher_id, facultet, group))


def to_tableee_groap(message, teacher_id, facultet, group):
    cyrs = message.text
    if cyrs == "1" or cyrs == "2" or cyrs == "3" or cyrs == "4":
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute('INSERT INTO groups (group_number, faculty, course) VALUES (?, ?, ?)',
                       (group, facultet, cyrs))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–ì—Ä—É–ø–ø–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, —Ç–µ–ø–µ—Ä—å –≤ –Ω–µ—ë –º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è —Å—Ç—É–¥–µ–Ω—Ç—ã.")
        spisok_grupp(message)
    else:
        bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –£–∫–∞–∂–∏—Ç–µ –∫—É—Ä—Å:")
        bot.register_next_step_handler(message, lambda msg: to_tableee_groap(msg, teacher_id, facultet, group))


# –í–´–í–û–î–ò–ú –°–ü–ò–°–û–ö –ì–†–£–ü–ü
def spisok_grupp(message):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM groups")
    groups = cursor.fetchall()
    connection.commit()
    connection.close()
    output = "".join(f"{groups[i][0]}) {groups[i][1]}, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {groups[i][2]}, –∫—É—Ä—Å: {groups[i][3]}\n" for i in
                     range(len(groups)))
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –≥—Ä—É–ø–ø—É", callback_data="changing_group"))
    markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add_group"))
    if output:
        bot.send_message(message.chat.id, f"–í—Å–µ –≥—Ä—É–ø–ø—ã:\n{output}", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º.")


# –ú–ï–ù–Ø–ï–ú –ù–ê–ó–í–ê–ù–ò–ï –ì–†–£–ü–ü–´
def nomber_change_group(message):
    nomber = message.text
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")
    bot.register_next_step_handler(message, lambda msg: changing_group(msg, nomber))


def changing_group(message, nomber):
    nomber_group = message.text
    bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫—É—Ä—Å:")
    bot.register_next_step_handler(message, lambda msg: changing_grouppp(msg, nomber, nomber_group))


def changing_grouppp(message, nomber, nomber_group):
    cyrs = message.text
    if cyrs == "1" or cyrs == "2" or cyrs == "3" or cyrs == "4":
        nomber = int(nomber)
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("UPDATE groups SET group_number = ?, course = ? WHERE id= ?", (nomber_group, cyrs, nomber))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id, "–≤—ã –ø–æ–º–µ–Ω—è–ª–∏ –¥–∞–Ω–Ω—ã–µ.")
        spisok_grupp(message)
    else:
        bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –£–∫–∞–∂–∏—Ç–µ –∫—É—Ä—Å:")
        bot.register_next_step_handler(message, lambda msg: changing_grouppp(msg, nomber, nomber_group))


def create_pie_chart(vals, labels):
    width = 800
    height = 800
    image = Image.new('RGB', (width, height), 'white')
    draw = ImageDraw.Draw(image)
    total = sum(vals)
    start_angle = 0
    legend_x = 30
    legend_y = 100
    legend_spacing = 30
    font_path = "arial.ttf"
    font = ImageFont.truetype(font_path, 25)
    now = datetime.now()
    months = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]
    current_month_index = now.month - 1
    current_month = months[current_month_index]
    month_font = ImageFont.truetype(font_path, 40)  # –®—Ä–∏—Ñ—Ç –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–∞
    month_text = f"–ú–µ—Å—è—Ü: {current_month}"
    bbox = draw.textbbox((0, 0), month_text, font=month_font)
    text_width = bbox[2] - bbox[0]
    text_height = bbox[3] - bbox[1]
    draw.text(((width - text_width) / 2, 20), month_text, fill="black", font=month_font)

    for i in range(len(vals)):
        end_angle = start_angle + (vals[i] / total) * 360
        color = tuple(int(x) for x in (255 * (i % 2), 100, 100))
        draw.pieslice([100, 200, width - 100, height - 80], start_angle, end_angle, fill=color)
        draw.rectangle([legend_x, legend_y + i * legend_spacing, legend_x + 20, legend_y + i * legend_spacing + 20],
                       fill=color)
        draw.text((legend_x + 24, legend_y + i * legend_spacing),
                  f"{labels[i]}: {vals[i]} ({vals[i] / total * 100:.1f}%)", fill="black", font=font)
        start_angle = end_angle

    return image

#–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞ –∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
@bot.message_handler(commands=['statistics'])
def statis_teacher (message):
    teacher_id = message.chat.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (teacher_id,))
    count_teacher = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (teacher_id,))
    count_student = cursor.fetchone()[0]
    if count_teacher > 0 and count_student == 0:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ", callback_data="statystic"))
        markup.add(types.InlineKeyboardButton("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª", callback_data="all_statystic"))
        bot.send_message(teacher_id, f"–í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç:", reply_markup=markup)
    elif count_teacher == 0 and count_student > 0:
        cursor.execute("SELECT complete, dont_complete FROM statystic_for_student WHERE student_id = ?", (teacher_id,))
        statystic_for_student = cursor.fetchone()
        if statystic_for_student:
            complete, dont_complete = statystic_for_student
            vals = [complete, dont_complete]
            labels = ["–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏", "–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏"]
            pie_chart_image = create_pie_chart(vals, labels)
            buf = BytesIO()
            pie_chart_image.save(buf, format='PNG')
            buf.seek(0)
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∏–∞–≥—Ä–∞–º–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            bot.send_photo(teacher_id, photo=buf)
        else:
            bot.send_message(teacher_id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
    elif count_teacher == 0 and count_student == 0:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
        bot.send_message(teacher_id, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. ", reply_markup=markup)
    elif count_teacher > 0 and count_student > 0:
        delete_zapis(message)
    connection.commit()
    connection.close()


#–°–†–ï–î–ù–ò–ô –ë–ê–õ–õ –°–¢–ê–¢–ò–°–¢–ò–ö–ê
def all_statystic(message, teacher_id, discipline):
    try:
        discipline_number = int(message.text)
    except ValueError:
        print("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.")
        return
    if discipline_number < 1 or discipline_number > len(discipline):
        print("–û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        return
    selected_discipline = discipline[discipline_number - 1][0]
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute(
        "SELECT DISTINCT group_number FROM task_for_student WHERE teacher_id = ? AND name_of_discipline = ?",
        (teacher_id, selected_discipline ))
    group_number = cursor.fetchall()
    connection.commit()
    connection.close()
    if group_number:
        output = "".join(
            f"\n{i + 1}) {group_number[i][0]} "
            for i in
            range(len(group_number)))
        bot.send_message(teacher_id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:\n{output}")
        bot.register_next_step_handler(message, lambda msg: all_statistic_g(msg, teacher_id, selected_discipline, group_number))
    else:
        bot.send_message(teacher_id, "–í—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã.")

def all_statistic_g(message, teacher_id, selected_discipline, group_number):
    try:
        group = int(message.text)
    except ValueError:
        print("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.")
        return
    if group < 1 or group > len(group_number):
        print("–û—à–∏–±–∫–∞: –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")
        return
    selected_group = group_number[group - 1][0]
    bot.send_message(teacher_id, f"–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω—é\n–í–≤–µ–¥–∏—Ç–µ —Å –∫–∞–∫–æ–≥–æ —á–∏—Å–ª–∞ –∏ –ø–æ –∫–∞–∫–æ–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n –ü—Ä–∏–º–µ—Ä: 10.10.2024-20.12.2024")
    bot.register_next_step_handler(message,
                                   lambda msg: all_statistic_date(msg, teacher_id, selected_discipline, selected_group))

def all_statistic_date(message, teacher_id, selected_discipline, selected_group):
    date = message.text.strip()
    try:
        date1_str, date2_str = date.split('-')
        date1_str = date1_str.strip()
        date2_str = date2_str.strip()

        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute(
            """
            SELECT student_id, name_student, task_id, complete 
            FROM task_list 
            WHERE teacher_id = ? 
              AND name_of_discipline = ? 
              AND group_number = ? 
              AND send_teacher_for_student_date >= ? 
              AND send_teacher_for_student_date <= ?
            """,
            (teacher_id, selected_discipline, selected_group, date1_str, date2_str))
        all_results = cursor.fetchall()
        student_stats = {}
        for record in all_results:
            student_id, name_student, task_id, complete = record
            if name_student not in student_stats:
                student_stats[name_student] = {
                    'completed_tasks': [],
                    'incompleted_tasks': [],
                    'marks': []
                }
            if complete == 1:
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
                cursor.execute(
                    """
                    SELECT mark 
                    FROM teacher_comment 
                    WHERE teacher_id = ? 
                      AND name_of_discipline = ? 
                      AND group_number = ? 
                      AND task_id = ? 
                      AND student_id = ?
                    """,
                    (teacher_id, selected_discipline, selected_group, task_id, student_id)
                )
                mark_result = cursor.fetchone()
                mark = mark_result[0] if mark_result else None

                if mark is not None:
                    student_stats[name_student]['completed_tasks'].append((task_id, mark))
                    student_stats[name_student]['marks'].append(mark)
            else:
                student_stats[name_student]['incompleted_tasks'].append(task_id)
        connection.commit()
        connection.close()
        doc = Document()
        doc.add_heading(f'{selected_discipline}\n–ì—Ä—É–ø–ø–∞ {selected_group}\n{date1_str} - {date2_str}', level=1)
        table = doc.add_table(rows=1, cols=4)
        table.style = 'Table Grid'
        hdr_cells = table.rows[0].cells
        hdr_cells[0].text = '–ò–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞'
        hdr_cells[1].text = '–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ —Å –æ—Ü–µ–Ω–∫–∞–º–∏'
        hdr_cells[2].text = '–ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏'
        hdr_cells[3].text = '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª'

        for name_student, stats in student_stats.items():
            completed_tasks_str = ', '.join([f'–ó–∞–¥–∞—á–∞ {task_id}: {mark}' for task_id, mark in stats['completed_tasks']])
            incompleted_tasks_str = ', '.join([f'–ó–∞–¥–∞—á–∞ {task_id}' for task_id in stats['incompleted_tasks']])
            average_mark = sum(stats['marks']) / (len(stats['marks']) + len(stats['incompleted_tasks'])) if stats['marks'] else 0
            row_cells = table.add_row().cells

            row_cells[0].text = str(name_student)
            row_cells[1].text = completed_tasks_str
            row_cells[2].text = incompleted_tasks_str
            row_cells[3].text = f'{average_mark:.2f}'
        document_name = f'statistics.docx'
        doc.save(document_name)
        bot.send_document(teacher_id, open(document_name, "rb"))
        os.remove(document_name)
    except sqlite3.Error as e:
        bot.send_message(teacher_id, (f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: {e}"))
    except ValueError:
        bot.send_message(teacher_id, "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞—Ç—ã –≤–≤–µ–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")


# –í–´–í–û–î–ò–ú –°–ü–ò–°–û–ö –°–¢–£–î–ï–ù–¢–û–í –°–î–ê–í–®–ò–• –ò –ù–ï –°–î–ê–í–®–ò–• –†–ê–ë–û–¢–£
def statystics(message, teacher_id):
    try:
        nomber = int(message.text)
    except ValueError:
        bot.send_message(teacher_id,
                         "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message,
                                       lambda msg: statystics(msg, teacher_id))
        return
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute(
        "SELECT name_student, group_number, the_task_for_student, name_of_discipline FROM task_list WHERE teacher_id = ? AND task_id = ? AND complete IS NULL",
        (teacher_id, nomber))
    info_dont_complete_task = cursor.fetchall()
    cursor.execute(
        "SELECT id, name_of_discipline, group_number, the_task_for_student, send_time, send_date FROM task_for_student WHERE teacher_id = ? AND statys = 1 ",
        (teacher_id,))
    info_send_task = cursor.fetchall()
    cursor.execute(
        "SELECT name_student, group_number, task_time, date, the_task_for_student, name_of_discipline FROM task_list WHERE teacher_id = ? AND task_id = ? AND complete = 1 ",
        (teacher_id, nomber))
    info_complete_task = cursor.fetchall()
    cursor.execute("SELECT COUNT (*) FROM task_list WHERE teacher_id = ? AND task_id = ? AND complete IS NULL",
                   (teacher_id, nomber))
    count_dont_complete_task = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM task_list WHERE teacher_id = ? AND task_id = ? AND complete = 1 ",
                   (teacher_id, nomber))
    count_complete_task = cursor.fetchone()[0]
    connection.commit()
    connection.close()
    have = False
    for i in range(len(info_send_task)):
        if info_send_task[i][0] == nomber:
            have = True
            if info_complete_task:
                output = "".join(
                    f"\n{info_complete_task[i][0]}- {info_complete_task[i][1]}, {info_complete_task[i][5]}\n–æ—Ç–ø—Ä–∞–≤–∏–ª(-–ª–∞) —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ:\n{info_complete_task[i][4]}\n–í {info_complete_task[i][2]} {info_complete_task[i][3]}"
                    for i in
                    range(len(info_complete_task)))
                bot.send_message(message.chat.id, f"–†–ï–®–ï–ù–ò–ï –û–¢–ü–†–ê–í–ò–õ–ò {count_complete_task} —Å—Ç—É–¥–µ–Ω—Ç–∞(-–æ–≤):{output}")
                if info_dont_complete_task:
                    out = "".join(
                        f"\n{info_dont_complete_task[i][0]}- {info_dont_complete_task[i][1]}"
                        for i in
                        range(len(info_dont_complete_task)))
                    bot.send_message(message.chat.id, f"–ù–ï –û–¢–ü–†–ê–í–ò–õ–ò {count_dont_complete_task} —Å—Ç—É–¥–µ–Ω—Ç–∞(-–æ–≤): {out}")
            else:
                bot.send_message(message.chat.id, f"–ù–µ—Ç —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
    if not have:
        bot.send_message(teacher_id, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç.")

#–¢–ü–†–ê–í–ò–¢–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï –°–¢–£–î–ï–ù–¢–ê–ú
def send_message_for_student(message):
    teacher_id = message.chat.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (message.chat.id,))
    teacher = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (message.chat.id,))
    student = cursor.fetchone()[0]
    # –ü–†–û–í–ï–†–ö–ê –ó–ê–†–ï–ì-–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ò–õ–ò –ù–ï–¢
    if student > 0 and teacher == 0:
        bot.send_message(message.chat.id, f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç. –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.")
    elif student == 0 and teacher > 0:
        cursor.execute("SELECT DISTINCT faculty FROM discipline WHERE teacher_id = ?", (teacher_id,))
        count_teacher = cursor.fetchall()
        for i in count_teacher:
            faculty = i[0]
            cursor.execute("SELECT DISTINCT group_number FROM student WHERE faculty = ?", (faculty,))
            info_ab = cursor.fetchall()
            output = "".join(
                f"{i + 1}) {info_ab[i][0]} " for i in
                range(len(info_ab)))
            bot.send_message(teacher_id, f"{output}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã:")
            bot.register_next_step_handler(message,
                                       lambda msg: send_message_for_studenttt(msg, teacher_id, info_ab))
        if not count_teacher:
            bot.send_message(teacher_id, "–ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –≤–∞—à–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ")
    elif student > 0 and teacher > 0:
        bot.send_message(message.chat.id,
                         f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.")
    elif student == 0 and teacher == 0:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
        bot.send_message(message.chat.id,
                         "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. ",
                         reply_markup=markup)
    connection.commit()
    connection.close()

def send_message_for_studenttt(message, teacher_id, info_ab):
    try:
        nomber = int(message.text)
    except ValueError:
        bot.send_message(teacher_id,
                         "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message,
                                       lambda msg: send_comment(msg, teacher_id))
        return

    if nomber < 1 or nomber > len(info_ab):
        bot.send_message(message.chat.id,
                         f'–í–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.')
        return
    groupp = info_ab[nomber - 1][0]
    bot.send_message(teacher_id, f"–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º –≥—Ä—É–ø–ø—ã {groupp} :")
    bot.register_next_step_handler(message,
                                       lambda msg: send_message_for_studentttt(msg, teacher_id, groupp))

def send_message_for_studentttt(message, teacher_id, groupp):
    message_for_student = message.text
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute(""" SELECT student_id 
                        FROM student 
                        WHERE group_number = ? """, (groupp,))
    for_student = cursor.fetchall()
    if len(for_student) > 0:
        cursor.execute(""" SELECT name, department 
                                FROM teachers 
                                WHERE teacher_id = ? """, (teacher_id,))
        info_ab_teacher = cursor.fetchone()
        if info_ab_teacher:
            name, department = info_ab_teacher
            for student in for_student:
                student_id = student[0]
                send_message_ga(student_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n{name}\n{department}:\n{message_for_student}")
            bot.send_message(teacher_id, "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            bot.send_message(teacher_id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    else:
        bot.send_message(teacher_id, f"–í –≥—Ä—É–ø–ø–µ {groupp} –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
    connection.close()

def complete_task(message):
    teacher_id = message.chat.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (message.chat.id,))
    teacher = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (message.chat.id,))
    student = cursor.fetchone()[0]
    # –ü–†–û–í–ï–†–ö–ê –ó–ê–†–ï–ì-–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ò–õ–ò –ù–ï–¢
    if student > 0 and teacher == 0:
        bot.send_message(message.chat.id, f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç. –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.")
    elif student == 0 and teacher > 0:
        cursor.execute(
            "SELECT id, name_of_discipline, group_number, the_task_for_student, send_time, send_date FROM task_for_student WHERE teacher_id = ? AND statys = 1",
            (teacher_id,))
        info_send_task = cursor.fetchall()
        if info_send_task:
            output = "".join(
                f"\n{info_send_task[i][0]}) {info_send_task[i][2]} {info_send_task[i][1]}\n–ó–∞–¥–∞—á–∞:\n{info_send_task[i][3]}\n–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {info_send_task[i][4]} {info_send_task[i][5]}"
                for i in
                range(len(info_send_task)))
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data="send_mark"))
            bot.send_message(message.chat.id, f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–¥–∞—á–∏:{output}", reply_markup=markup)
        else:
            bot.send_message(message.chat.id, f"–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.")
    elif student > 0 and teacher > 0:
        bot.send_message(message.chat.id,
                         f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.")
    elif student == 0 and teacher == 0:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
        bot.send_message(message.chat.id,
                         "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. ",
                         reply_markup=markup)
    connection.commit()
    connection.close()

def send_comment(message, teacher_id):
    try:
        nomber = int(message.text)
    except ValueError:
        bot.send_message(teacher_id,
                         "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message,
                                       lambda msg: send_comment(msg, teacher_id))
        return
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute(
        "SELECT id, name_of_discipline, group_number, the_task_for_student, send_time, send_date FROM task_for_student WHERE teacher_id = ? AND statys = 1 ",
        (teacher_id,))
    info_send_task = cursor.fetchall()
    have = False
    for i in range(len(info_send_task)):
        if info_send_task[i][0] == nomber:
            have = True
            cursor.execute(
                "SELECT id, name_student, group_number, task_time, date, the_task_for_student, name_of_discipline FROM task_list WHERE teacher_id = ? AND task_id = ? AND complete = 1 AND send_mark_date IS NULL",
                (teacher_id, nomber))
            info_complete_task = cursor.fetchall()
            if info_complete_task:
                output = "".join(
                    f"\n{info_complete_task[i][0]}) {info_complete_task[i][1]}- {info_complete_task[i][2]}, {info_complete_task[i][6]}\n–æ—Ç–ø—Ä–∞–≤–∏–ª(-–ª–∞) —Ä–µ—à–µ–Ω–∏–µ –ø–æ –∑–∞–¥–∞—á–µ:\n{info_complete_task[i][5]}\n–í {info_complete_task[i][3]} {info_complete_task[i][4]}"
                    for i in
                    range(len(info_complete_task)))
                bot.send_message(message.chat.id, f"–†–ï–®–ï–ù–ò–ï –û–¢–ü–†–ê–í–ò–õ–ò:\n{output}")
                bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ—à–µ–Ω–∏—è, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É:")
                bot.register_next_step_handler(message,
                                               lambda msg: send_mark(msg, teacher_id, nomber, info_complete_task))
            else:
                bot.send_message(message.chat.id, f"–ù–µ—Ç —Ä–µ—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.")
    connection.commit()
    connection.close()
    if not have:
        bot.send_message(teacher_id, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç.")


def send_mark(message, teacher_id, nomber, info_complete_task):
    try:
        id = int(message.text)
    except ValueError:
        bot.send_message(teacher_id,
                         "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message,
                                       lambda msg: send_mark(msg, teacher_id, nomber, info_complete_task))
        return
    have = False
    for i in range(len(info_complete_task)):
        if info_complete_task[i][0] == id:
            have = True
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("2 - –Ω–µ—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", callback_data=f"neyd{id}-{nomber}"))
            markup.add(
                types.InlineKeyboardButton("3 - —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ", callback_data=f"ydovletvoritelno{id}-{nomber}"))
            markup.add(types.InlineKeyboardButton("4 - —Ö–æ—Ä–æ—à–æ", callback_data=f"horosho{id}-{nomber}"))
            markup.add(types.InlineKeyboardButton("5 - –æ—Ç–ª–∏—á–Ω–æ", callback_data=f"otlichno{id}-{nomber}"))
            bot.send_message(message.chat.id, f"–í–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:", reply_markup=markup)
    if not have:
        bot.send_message(teacher_id, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç.")


def ocenka(message, teacher_id, mark, id, nomber):
    comment = message.text
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute(
        "SELECT task_id, student_id, group_number, the_task_for_student, name_of_discipline FROM task_list WHERE teacher_id = ? AND id = ? AND complete = 1",
        (teacher_id, id))
    complete = cursor.fetchall()
    now = datetime.now()
    current_date = now.strftime("%d.%m")
    current_time = now.strftime("%H:%M")
    for task in complete:
        task_id, student_id, group_number, the_task_for_student, name_of_discipline = task
        cursor.execute(
            'INSERT INTO teacher_comment (task_id, student_id, teacher_id, name_of_discipline, the_task_for_student, send_time, date, group_number, comment, mark) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            (task_id, student_id, teacher_id, name_of_discipline, the_task_for_student, current_time, current_date,
             group_number, comment, mark))
        connection.commit()
        connection.close()
        bot.send_message(teacher_id,
                         f"–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n–û—Ü–µ–Ω–∫–∞ {mark}\n{comment}\n–ë—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç—É. –í–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        send_coment_teacher(current_date,current_time)

#–ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö

def info(message):
    teacher_id = message.chat.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (message.chat.id,))
    teacher = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (message.chat.id,))
    student = cursor.fetchone()[0]
    # –ü–†–û–í–ï–†–ö–ê –ó–ê–†–ï–ì-–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ò–õ–ò –ù–ï–¢
    if student > 0 and teacher == 0:
        bot.send_message(message.chat.id, f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç. –§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.")
    elif student == 0 and teacher > 0:
        cursor.execute("SELECT DISTINCT faculty FROM discipline WHERE teacher_id = ?", (teacher_id,))
        count_teacher = cursor.fetchall()
        for i in count_teacher:
            faculty = i[0]
            cursor.execute("SELECT DISTINCT name, phone_number, mail, group_number FROM student WHERE faculty = ?", (faculty,))
            info_ab = cursor.fetchall()
            output = "".join(
                f"{i + 1}) {info_ab[i][0]}, {info_ab[i][1]}, {info_ab[i][2]} –ì–†–£–ü–ü–ê {info_ab[i][3]} " for i in
                range(len(info_ab)))
            bot.send_message(teacher_id, f"{output}")
        if not count_teacher:
            bot.send_message(teacher_id, "–ù–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –≤–∞—à–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–µ")
    elif student > 0 and teacher > 0:
        bot.send_message(message.chat.id,
                         f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.")
    elif student == 0 and teacher == 0:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
        bot.send_message(message.chat.id,
                         "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. ",
                         reply_markup=markup)
    connection.commit()
    connection.close()

# –£–¥–∞–ª—è–µ–º —É—á—ë—Ç–Ω—É—é –∑–∞–ø–∏—Å—å

def delete_zapis(message):
    user_id = message.chat.id
    # –ü–†–û–í–ï–†–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (user_id,))
    count_teacher = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (user_id,))
    count_student = cursor.fetchone()[0]
    if count_teacher > 0 and count_student > 0:
        bot.send_message(message.chat.id,
                         f"–£ –≤–∞—Å –¥–≤–µ —É—á—ë—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏. –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç –∏ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.\n–ö–∞–∫—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?\n1. –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å\n2. –°—Ç—É–¥–µ–Ω—Ç ")
        bot.register_next_step_handler(message, lambda msg: teacher_or_student_account(msg, user_id))
    elif count_teacher > 0 and count_student == 0:
        cursor.execute("SELECT name, phone_number, mail, department FROM teachers WHERE teacher_id = ?", (user_id,))
        info_about_teacher = cursor.fetchall()
        connection.commit()
        connection.close()
        output = "".join(
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n1) –ò–º—è: {info_about_teacher[i][0]}\n2) –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {info_about_teacher[i][1]}\n3) –ü–æ—á—Ç–∞: {info_about_teacher[i][2]}\n4) –ö–∞—Ñ–µ–¥—Ä–∞: {info_about_teacher[i][3]}"
            for i in range(len(info_about_teacher)))
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–î–∞", callback_data="delete"))
        markup.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="ne_delete"))
        bot.send_message(message.chat.id, f"–£ –≤–∞—Å –µ—Å—Ç—å 1 —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å,\n{output}\n —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
                         reply_markup=markup)
    elif count_teacher == 0 and count_student > 0:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–î–∞", callback_data="deletee"))
        markup.add(types.InlineKeyboardButton("–ù–µ—Ç", callback_data="ne_delete"))
        cursor.execute(
            "SELECT name, phone_number, mail, faculty, course, group_number FROM student WHERE student_id = ?",
            (user_id,))
        info_about_student = cursor.fetchall()
        connection.commit()
        connection.close()
        output = "".join(
            f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n1) –ò–º—è: {info_about_student[i][0]}\n2) –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {info_about_student[i][1]}\n3) –ü–æ—á—Ç–∞: {info_about_student[i][2]}\n4) –§–∞–∫—É–ª—å—Ç–µ—Ç: {info_about_student[i][3]}\n5) –ö—É—Ä—Å: {info_about_student[i][4]}\n6) –ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã: {info_about_student[i][5]}"
            for i in range(len(info_about_student)))
        bot.send_message(message.chat.id, f"–£ –≤–∞—Å –µ—Å—Ç—å 1 —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å,\n{output}\n —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å?",
                         reply_markup=markup)
    else:
        connection.commit()
        connection.close()
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
        bot.send_message(message.chat.id,
                         "–£ –≤–∞—Å –Ω–µ—Ç —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏. –•–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
                         reply_markup=markup)


def teacher_or_student_account(message, user_id):
    statys = message.text
    if statys == "1":
        statys = int(statys)
        delete_user(message, user_id, statys)
    elif statys == "2":
        statys = int(statys)
        delete_user(message, user_id, statys)
    else:
        bot.send_message(message.chat.id, "–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")


def delete_user(message, user_id, statys):
    if statys == 1:
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("DELETE FROM teachers WHERE teacher_id = ?", (user_id,))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id,
                         f"–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")
    if statys == 2:
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("DELETE FROM student WHERE student_id= ?", (user_id,))
        connection.commit()
        connection.close()
        bot.send_message(message.chat.id,
                         f"–í–∞—à–∞ —É—á—ë—Ç–Ω–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")


# –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–ï–ì–£–õ–Ø–†–ù–û–ô (–°–¢–£–î–ï–ù–¢) –ò –ù–ï–†–ï–ì–ï–ì–£–õ–Ø–†–ù–û–ô –ó–ê–î–ê–ß–ò (–°–¢–£–î–ï–ù–¢ –ò –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨)

def new_task(message, text):
    regular = None
    user_id = message.chat.id
    # –ü–†–û–í–ï–†–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (user_id,))
    count_teacher = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (user_id,))
    count_student = cursor.fetchone()[0]
    connection.commit()
    connection.close()
    if count_teacher > 0 and count_student > 0:
        delete_zapis(message)
    elif count_teacher > 0 and count_student == 0:
        if text == "add_regular_task":
            bot.send_message(message.chat.id, "–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º.")
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–°–µ–π—á–∞—Å", callback_data="now"))
            markup.add(types.InlineKeyboardButton("–ö–æ –≤—Ä–µ–º–µ–Ω–∏", callback_data="time"))
            bot.send_message(message.chat.id,
                             "–ö–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É?",
                             reply_markup=markup)
    elif count_teacher == 0 and count_student > 0:
        statys = 2
        print(message.text)
        if text == "add_regular_task":
            send = "time"
            regular = True
            bot.send_message(message.chat.id, "–ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å? –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            bot.register_next_step_handler(message, lambda msg: whattime(msg, message.chat.id, regular, statys, send))
        else:
            regular = False
            send = "time"
            bot.send_message(message.chat.id, "–ö–∞–∫—É—é –∑–∞–¥–∞—á—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å? –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            bot.register_next_step_handler(message, lambda msg: whattime(msg, message.chat.id, regular, statys, send))
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
        bot.send_message(message.chat.id,
                         "–£ –≤–∞—Å –Ω–µ—Ç —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
                         reply_markup=markup)

def whattime(message, user_id, regular, statys, send):
    regular = regular
    task_plan = message.text
    if send == 'time':
    # –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–¨
        if statys == 1:
            bot.send_message(message.chat.id, "–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É? (–ù–∞–ø—Ä–∏–º–µ—Ä - 13:30)")
            bot.register_next_step_handler(message, lambda msg: save_time(msg, task_plan, user_id, regular, statys, send))
        # –°–¢–£–î–ï–ù–¢
        elif statys == 2:
            bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è? (–ù–∞–ø—Ä–∏–º–µ—Ä - 13:30)")
            bot.register_next_step_handler(message, lambda msg: save_time(msg, task_plan, user_id, regular, statys, send))
    if send == "now":
        what_time = 0
        save_task(message, task_plan, user_id, what_time, regular, statys, send)



def save_time(message, task_plan, user_id, regular, statys, send):
    regular = regular
    what_time = message.text
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Å—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 23 –∏ –º–∏–Ω—É—Ç—ã –æ—Ç 0 –¥–æ 59
    try:
        hours, minutes = map(int, what_time.split(':'))
        if 0 <= hours < 24 and 0 <= minutes < 60:
            bot.send_message(message.chat.id,
                             "–ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú \n(–ù–∞–ø—Ä–∏–º–µ—Ä - 12.07)")
            bot.register_next_step_handler(message,
                                           lambda msg: save_task(msg, task_plan, user_id, what_time, regular, statys, send))
        else:
            bot.send_message(message.chat.id,
                             f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú \n –ü—Ä–∏–º–µ—Ä (13:30)")
            bot.register_next_step_handler(message, lambda msg: save_time(msg, task_plan, user_id, regular, statys, send))

    except ValueError:
        bot.send_message(user_id,
                         "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú \n –ü—Ä–∏–º–µ—Ä (13:30)")
        bot.register_next_step_handler(message, lambda msg: save_time(msg, task_plan, user_id, regular, statys, send))


def save_task(message, task_plan, user_id, what_time, regular, statys, send):
    if send == "time":
        date_time = message.text
        if statys == 1:
            try:
                days, month = map(int, date_time.split('.'))
                print(month, days)
                if 1 <= month <= 12 and 1 <= days < 32:
                    connection = sqlite3.connect('my_database.db')
                    cursor = connection.cursor()
                    cursor.execute("SELECT id, name_of_discipline,faculty FROM discipline WHERE teacher_id = ?", (user_id,))
                    discipline = cursor.fetchall()
                    connection.commit()
                    connection.close()
                    output = "".join(f"{discipline[i][0]}) {discipline[i][1]}, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {discipline[i][2]}\n" for i in
                                     range(len(discipline)))
                    if output:
                        bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:\n{output}")
                        bot.register_next_step_handler(message,
                                                       lambda msg: discipline_number_statys_teacher_1(msg, task_plan,
                                                                                                      user_id, what_time,
                                                                                                      date_time,
                                                                                                      discipline))
                    else:
                        bot.send_message(message.chat.id, f"–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.")
                else:
                    bot.send_message(message.chat.id,
                                     "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú \n(–ù–∞–ø—Ä–∏–º–µ—Ä - 12.07)")
                    bot.register_next_step_handler(message,
                                                   lambda msg: save_task(msg, task_plan, user_id, what_time, regular,
                                                                         statys, send))
            except ValueError:
                bot.send_message(user_id,
                                 "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú \n(–ù–∞–ø—Ä–∏–º–µ—Ä - 12.07)")
                bot.register_next_step_handler(message,
                                               lambda msg: save_task(msg, task_plan, user_id, what_time, regular, statys, send))
            except Exception as e:
                bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        if statys == 2:
            try:
                days, month = map(int, date_time.split('.'))
                if 1 <= month <= 12 and 1 <= days < 32:
                    count_regular_task = 0
                    connection = sqlite3.connect('my_database.db')
                    cursor = connection.cursor()
                    cursor.execute(
                        'INSERT INTO tasks (user_id, task, task_time, date, regular_task, count_regular_task) VALUES (?, ?, ?, ?, ?, ?)',
                        (user_id, task_plan, what_time, date_time, regular, count_regular_task))
                    cursor.execute("SELECT COUNT (*) FROM statystic_for_student WHERE student_id = ?", (user_id,))
                    count_statystic_for_student = cursor.fetchone()[0]
                    if count_statystic_for_student == 0:
                        complete = 0
                        dont_complete = 0
                        all_tasks = 0
                        cursor.execute('INSERT INTO statystic_for_student (student_id, complete, dont_complete, all_tasks) VALUES (?, ?, ?, ?)',
                            (user_id, complete, dont_complete, all_tasks))
                    connection.commit()
                    connection.close()
                    bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
                else:
                    bot.send_message(message.chat.id,
                                     "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú \n(–ù–∞–ø—Ä–∏–º–µ—Ä - 12.07)")
                    bot.register_next_step_handler(message,
                                                   lambda msg: save_task(msg, task_plan, user_id, what_time, regular,
                                                                         statys, send))
            except ValueError:
                bot.send_message(user_id,
                                 "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú \n(–ù–∞–ø—Ä–∏–º–µ—Ä - 12.07)")
                bot.register_next_step_handler(message,
                                               lambda msg: save_task(msg, task_plan, user_id, what_time, regular, statys, send))
            except Exception as e:
                bot.send_message(user_id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    if send == "now":
        date_time = 0
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("SELECT id, name_of_discipline,faculty FROM discipline WHERE teacher_id = ?", (user_id,))
        discipline = cursor.fetchall()
        connection.commit()
        connection.close()
        output = "".join(f"{discipline[i][0]}) {discipline[i][1]}, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {discipline[i][2]}\n" for i in
                         range(len(discipline)))
        if output:
            bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:\n{output}")
            bot.register_next_step_handler(message,
                                           lambda msg: discipline_number_statys_teacher_1(msg, task_plan,
                                                                                          user_id, what_time,
                                                                                          date_time,
                                                                                          discipline))
        else:
            bot.send_message(message.chat.id, f"–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.")

# –î–ê–õ–¨–®–ï –¢–û–õ–¨–ö–û –î–õ–Ø –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø
def discipline_number_statys_teacher_1(message, task_plan, user_id, what_time, date_time, discipline):
    try:
        nomer = int(message.text)
    except ValueError:
        bot.send_message(user_id,
                         "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message,
                                       lambda msg: discipline_number_statys_teacher_1(msg, task_plan, user_id,
                                                                                      what_time, date_time, discipline))
        return
    have = False
    for i in range(len(discipline)):
        if discipline[i][0] == nomer:
            have = True
            facultet = discipline[i][2]
            name_of_discipline = discipline[i][1]
            connection = sqlite3.connect('my_database.db')
            cursor = connection.cursor()
            cursor.execute("SELECT id, group_number, faculty, course FROM groups WHERE faculty = ?", (facultet,))
            group = cursor.fetchall()
            connection.commit()
            connection.close()
            output = "".join(f"{group[i][0]}) {group[i][1]}, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: {group[i][2]}, {group[i][3]}\n" for i in
                             range(len(group)))
            if output:
                bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:\n{output}")
                bot.register_next_step_handler(message,
                                               lambda msg: group_number_statys_teacher_1(msg, task_plan, user_id,
                                                                                         what_time, date_time,
                                                                                         name_of_discipline, facultet,
                                                                                         group))
            else:
                bot.send_message(message.chat.id, f"–í—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –≥—Ä—É–ø–ø—É.")
    if not have:
        bot.send_message(user_id,
                         "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message,
                                       lambda msg: discipline_number_statys_teacher_1(msg, task_plan, user_id,
                                                                                      what_time, date_time, discipline))


def group_number_statys_teacher_1(message, task_plan, user_id, what_time, date_time, name_of_discipline, facultet,
                                  group):
    try:
        id = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.")
        bot.register_next_step_handler(message,
                                       lambda msg: group_number_statys_teacher_1(msg, task_plan, user_id, what_time,
                                                                                 date_time, name_of_discipline,
                                                                                 facultet, group))
        return
    have = False
    for i in range(len(group)):
        if group[i][0] == id:
            have = True
            group_number = group[i][1]
            course = group[i][3]
            bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∑–∞–¥–∞–Ω–∏–µ–º")
            bot.register_next_step_handler(message,
                                           lambda msg: document_number_statys_teacher_1(msg, task_plan, user_id,
                                                                                        what_time,
                                                                                        date_time,
                                                                                        name_of_discipline, facultet,
                                                                                        group_number, course))
    if not have:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message,
                                       lambda msg: group_number_statys_teacher_1(msg, task_plan, user_id, what_time,
                                                                                 date_time, name_of_discipline,
                                                                                 facultet, group))


def document_number_statys_teacher_1(message, task_plan, user_id, what_time, date_time, name_of_discipline, facultet,
                                     group_number, course):
    if message.document:
        file_name = message.document.file_name
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(file_name, 'wb') as new_file:
            new_file.write(downloaded_file)
        if what_time == 0 and date_time == 0:
            statys = 1
            now = datetime.now()
            new_time = now - timedelta(minutes=1)
            date_time = now.strftime("%d.%m")
            what_time = new_time.strftime("%H:%M")
            connection = sqlite3.connect('my_database.db')
            cursor = connection.cursor()
            cursor.execute(
                'INSERT INTO task_for_student (send_date, send_time, name_of_discipline, the_task_for_student, document, group_number, teacher_id, faculty, course, statys) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
                (date_time, what_time, name_of_discipline, task_plan, file_name, group_number, user_id, facultet,
                 course, statys))
            connection.commit()
            connection.close()
            bot.send_message(message.chat.id,
                             "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞.\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
            # –í–´–í–û–î –ó–ê–ì–†–£–ñ–ï–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò
            conn = sqlite3.connect('my_database.db')
            cursor = conn.cursor()
            cursor.execute("""
                        SELECT student_id 
                        FROM student 
                        WHERE group_number = ? """, (group_number,))
            for_student = cursor.fetchall()
            for student in for_student:
                student_id = student[0]
                send_message_ga(student_id, f"{name_of_discipline}\n–ó–ê–î–ê–ù–ò–ï:\n{task_plan}\n")
                bot.send_document(student_id, open(f"{file_name}", "rb"))
                cursor.execute("""
                                            SELECT name 
                                            FROM student 
                                            WHERE student_id = ? """, (student_id,))
                name_student = cursor.fetchall()
                for names in name_student:
                    student_name = names[0]
                    cursor.execute("""
                                                SELECT id 
                                                FROM task_for_student 
                                                WHERE send_date = ? AND send_time = ? AND name_of_discipline = ? AND the_task_for_student = ? AND document = ? AND group_number = ? AND teacher_id = ? AND faculty = ? AND course = ? AND statys = ?""", (date_time, what_time, name_of_discipline, task_plan, file_name, group_number, user_id, facultet,
                 course, statys))
                    for_id = cursor.fetchall()
                    for ids in for_id:
                        id = ids[0]
                        cursor.execute(
                            'INSERT INTO task_list (name_student, task_id, student_id, teacher_id, name_of_discipline, the_task_for_student, group_number, send_teacher_for_student_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
                            (student_name, id, student_id, user_id, name_of_discipline, task_plan,
                             group_number, date_time))
            send_message_ga(user_id,
                            f"{name_of_discipline}\n–ó–∞–¥–∞—á–∞: {task_plan}\n–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –≥—Ä—É–ø–ø—ã {group_number}")
            os.remove(file_name)
        else:
            conn = sqlite3.connect('my_database.db')
            cursor = conn.cursor()
            cursor.execute(
                'INSERT INTO task_for_student (send_date, send_time, name_of_discipline, the_task_for_student, document, group_number, teacher_id, faculty, course) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)',
                (date_time, what_time, name_of_discipline, task_plan, file_name, group_number, user_id, facultet,
                 course))
            bot.send_message(message.chat.id, "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞.\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
            # –í–´–í–û–î –ó–ê–ì–†–£–ñ–ï–ù–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ò
        conn.commit()
        conn.close()
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç.")
        bot.register_next_step_handler(message,
                                       lambda msg: document_number_statys_teacher_1(msg, task_plan, user_id, what_time,
                                                                                    date_time, name_of_discipline,
                                                                                    facultet, group_number, course))


# –î–õ–Ø –°–¢–£–î–ï–ù–¢–û–í –í–°–ï –ó–ê–î–ê–ß–ò –û–¢ –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø/ –û–¢–ü–†–ê–í–ò–¢–¨ –†–ï–®–ï–ù–ò–ï

def task_list(message):
    student_id = message.chat.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (message.chat.id,))
    count_teacher = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (message.chat.id,))
    count_student = cursor.fetchone()[0]
    if count_teacher > 0 and count_student > 0:
        delete_zapis(message)
    elif count_teacher > 0 and count_student == 0:
        bot.send_message(message.chat.id, "–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º.")
    elif count_teacher == 0 and count_student > 0:
        cursor.execute(
            "SELECT id, name_of_discipline, the_task_for_student FROM task_list WHERE student_id = ? AND complete IS NULL ",
            (student_id,))
        tasks = cursor.fetchall()
        output = "".join(f"{i + 1}) {tasks[i][1]}\n–ó–ê–î–ê–ß–ê:\n{tasks[i][2]}, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n" for i in range(len(tasks)))
        if tasks:
            markup = types.InlineKeyboardMarkup()
            markup.add(
                types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é", callback_data="send_completed_task"))
            bot.send_message(message.chat.id, f"–í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{output}",
                             reply_markup=markup)
        else:
            bot.send_message(message.chat.id, f'–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.')
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
        bot.send_message(message.chat.id,
                         "–£ –≤–∞—Å –Ω–µ—Ç —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
                         reply_markup=markup)
    connection.commit()
    connection.close()

def send_task_for_teacher(message, student_id):
    try:
        nomber = int(message.text)
    except ValueError:
        bot.send_message(student_id,
                         "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message,
                                       lambda msg: send_task_for_teacher(msg, student_id))
        return
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT id FROM task_list WHERE student_id = ? AND complete IS NULL ", (student_id,))
    tasks = cursor.fetchall()
    if not tasks:
        bot.send_message(message.chat.id, f'–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.')
        return
    if nomber < 1 or nomber > len(tasks):
        bot.send_message(message.chat.id,
                         f'–í–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.')
        return
    tasks_id = tasks[nomber - 1][0]
    bot.send_message(message.chat.id, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å —Ä–µ—à–µ–Ω–∏–µ–º –∑–∞–¥–∞—á–∏")
    connection.commit()
    connection.close()
    bot.register_next_step_handler(message, lambda msg: send_document_for_teacher(msg, student_id, tasks_id))


def send_document_for_teacher(message, student_id, tasks_id):
    if message.document:
        file_name = message.document.file_name
        file_info = bot.get_file(message.document.file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        with open(file_name, 'wb') as new_file:
            new_file.write(downloaded_file)
            now = datetime.now()
            current_date = now.strftime("%d.%m")
            current_time = now.strftime("%H:%M")
            connection = sqlite3.connect('my_database.db')
            cursor = connection.cursor()
            cursor.execute("UPDATE task_list SET document = ?, task_time = ?, date = ? WHERE id = ?",
                           (file_name, current_time, current_date, tasks_id))
            connection.commit()
            connection.close()
        bot.send_message(student_id,
                         "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞.\n–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
        send_doc_for_teacher(file_name, current_time, current_date, tasks_id, student_id)
    else:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç.")
        bot.register_next_step_handler(message,
                                       lambda msg: send_document_for_teacher(msg, student_id, tasks_id))


# –î–û–°–¢–ê–Å–ú –í–°–ï –ó–ê–î–ê–ß–ò –ò–ó –ë–î –î–õ–Ø –°–¢–£–î–ï–ù–¢–ê

def get_all_tasks_from_db(message):
    user_id = message.chat.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (message.chat.id,))
    count_teacher = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (message.chat.id,))
    count_student = cursor.fetchone()[0]
    if count_teacher > 0 and count_student > 0:
        delete_zapis(message)
    elif count_teacher > 0 and count_student == 0:
        bot.send_message(message.chat.id, "–§—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º.")
    elif count_teacher == 0 and count_student > 0:
        cursor.execute("SELECT task, task_time, date FROM tasks WHERE user_id = ?", (user_id,))
        tasks = cursor.fetchall()
        cursor.execute(
            "SELECT task_id, name_of_discipline, the_task_for_student FROM task_list WHERE student_id = ? AND complete IS NULL ",
            (user_id,))
        tasks_from_teacher = cursor.fetchall()
        output = "".join(f"{i + 1}) {tasks[i][0]} –≤ {tasks[i][1]}, {tasks[i][2]}\n" for i in range(len(tasks)))
        output_task_from_teacher = "".join(
            f"–ó–∞–¥–∞—á–∞ ‚Ññ{tasks_from_teacher[i][0]}\n {tasks_from_teacher[i][1]}\n–ó–∞–¥–∞–Ω–∏–µ:{tasks_from_teacher[i][2]}\n" for i in range(len(tasks_from_teacher)))
        if output or output_task_from_teacher:
            if output:
                bot.send_message(message.chat.id, "–í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:")
                bot.send_message(message.chat.id, output)
            if output_task_from_teacher:
                bot.send_message(message.chat.id, output_task_from_teacher)
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")

    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
        bot.send_message(message.chat.id,
                         "–£ –≤–∞—Å –Ω–µ—Ç —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
                         reply_markup=markup)
    connection.commit()
    connection.close()

# –£–î–ê–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ò –ò–ó –ë–î –î–õ–Ø –°–¢–£–î–ï–ù–¢–ê –ò –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø
def delete_task_from_db(message):
    user_id = message.chat.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (user_id,))
    count_teacher = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (user_id,))
    count_student = cursor.fetchone()[0]
    if count_teacher > 0 and count_student > 0:
        delete_zapis(message)
    elif count_teacher > 0 and count_student == 0:
        statys = 1
        cursor.execute("SELECT COUNT (*) FROM task_for_student WHERE teacher_id = ?", (user_id,))
        count = cursor.fetchone()[0]
        if count > 0:
            cursor.execute(
                "SELECT id, the_task_for_student, name_of_discipline, send_date, send_time, group_number FROM task_for_student WHERE teacher_id = ?",
                (user_id,))
            tasks = cursor.fetchall()
            proverka_id = "".join(f"{x[0]} " for x in tasks)
            output = "".join(
                f"‚Ññ{x[0]} - {x[2]}, –ó–ê–î–ê–ß–ê: {x[1]}\n–î–õ–Ø –ì–†–£–ü–ü–´:{x[5]}\n–í–†–ï–ú–Ø –û–¢–ü–†–ê–í–ö–ò: {x[3]}, {x[4]}\n" for x in tasks)
            bot.send_message(message.chat.id,
                             f"–í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:")
            bot.send_message(message.chat.id, output)
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.")
            bot.register_next_step_handler(message, lambda msg: delete_tasks_from_db(msg, proverka_id, statys))
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á")
    elif count_teacher == 0 and count_student > 0:
        statys = 2
        connection = sqlite3.connect('my_database.db')
        cursor = connection.cursor()
        cursor.execute("SELECT COUNT (*) FROM tasks WHERE user_id = ?", (user_id,))
        count = cursor.fetchone()[0]
        if count > 0:
            cursor.execute("SELECT id, task, task_time, date FROM tasks WHERE user_id = ?", (user_id,))
            tasks = cursor.fetchall()
            proverka_id = "".join(f"{x[0]} " for x in tasks)
            output = "".join(f"{x[0]} - {x[1]} –≤ {x[2]}, {x[3]}\n" for x in tasks)
            bot.send_message(message.chat.id,
                             f"–í—Å–µ –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:")
            bot.send_message(message.chat.id, output)
            bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
            bot.register_next_step_handler(message, lambda msg: delete_tasks_from_db(msg, proverka_id, statys))
        else:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á")
    else:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
        bot.send_message(message.chat.id,
                         "–£ –≤–∞—Å –Ω–µ—Ç —É—á—ë—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.",
                         reply_markup=markup)
    connection.commit()
    connection.close()


def delete_tasks_from_db(message, proverka_id, statys):
    id = message.text
    user_id = message.chat.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    try:
        if statys == 1:
            if id in proverka_id:
                id = int(id)
                cursor.execute(
                    "SELECT student_id, task_id, name_of_discipline, the_task_for_student FROM task_list WHERE task_id = ?",
                    (id,))
                tasks = cursor.fetchall()
                cursor.execute("DELETE FROM task_for_student WHERE id = ?", (id,))
                cursor.execute("DELETE FROM task_list WHERE task_id = ?", (id,))
                for task in tasks:
                    student_id, task_id, name_of_discipline, the_task_for_student = task
                    bot.send_message(student_id,
                                     f"–ó–∞–¥–∞—á–∞ ‚Ññ{task_id}, {name_of_discipline}\n–ó–∞–¥–∞–Ω–∏–µ:{the_task_for_student}\n–£–î–ê–õ–ï–ù–û –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–ï–ú")
                cursor.execute("SELECT COUNT(*) FROM task_for_student WHERE teacher_id = ?", (user_id,))
                count = cursor.fetchone()[0]
                if count > 0:
                    bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ {id} —É–¥–∞–ª–µ–Ω–∞")
                else:
                    bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ {id} —É–¥–∞–ª–µ–Ω–∞")
                    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
            else:
                bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç.")
        elif statys == 2:
            if id in proverka_id:
                id = int(id)
                cursor.execute("DELETE FROM tasks WHERE id = ?", (id,))
                cursor.execute("SELECT COUNT(*) FROM tasks WHERE user_id = ?", (user_id,))
                count = cursor.fetchone()[0]
                if count > 0:
                    bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ {id} —É–¥–∞–ª–µ–Ω–∞")
                    connection.commit()
                    get_all_tasks_from_db(message)
                else:
                    bot.send_message(message.chat.id, f"–ó–∞–¥–∞—á–∞ {id} —É–¥–∞–ª–µ–Ω–∞")
                    bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")
            else:
                bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç.")
        connection.commit()
    except Exception as e:
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
        print(f"Error: {e}")
    finally:
        connection.close()

def for_admin(message):
    user_id = message.chat.id
    text = message.text
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT id_admin FROM parol")
    id_admin = cursor.fetchone()
    id_admin = id_admin[0]
    cursor.execute("INSERT INTO admin (id_user, text_for_admin) VALUES (?, ?)", (user_id, text))
    connection.commit()
    connection.close()
    bot.send_message(user_id, "–û–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ.")
    bot.send_message(id_admin, f"–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}\n{text}")

def obrashenya_ot_user(message):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT * FROM admin")
    text = cursor.fetchall()
    connection.commit()
    connection.close()
    if len(text) > 0:
        output = "".join(f"{x[0]} - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {x[1]}\n{x[2]}\n" for x in text)
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ", callback_data="otvet_for_user"))
        bot.send_message(message.chat.id, f"–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π:\n{output}", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø—É—Å—Ç.")

def otvet_user(message):
    try:
        nomber = int(message.text)
    except ValueError:
        bot.send_message(message.chat.id,
                         "–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        bot.register_next_step_handler(message,
                                       lambda msg: obrashenya_ot_user(msg))
        return

    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT id_user FROM admin WHERE id = ?", (nomber,))
    tasks = cursor.fetchone()
    if not tasks:
        bot.send_message(message.chat.id, f'–û–±—Ä–∞—â–µ–Ω–∏–µ —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        return
    user_id = tasks[0]
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å –æ—Ç–≤–µ—Ç–æ–º:")
    bot.register_next_step_handler(message, lambda msg: delete_text_from_db(msg, user_id, nomber))
    connection.commit()
    connection.close()

def delete_text_from_db(message, user_id, nomber):
    text = message.text
    bot.send_message(user_id, f"–û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {text}")
    bot.send_message(message.chat.id, f"–í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("DELETE FROM admin WHERE id = ?", (nomber,))
    connection.commit()
    connection.close()

#–ú–ï–ù–Ø–ï–ú –ü–ê–†–û–õ–¨ (–ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†)
@bot.message_handler(commands=['change_parol'])
def change_parol(message):
    user_id = message.chat.id
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT(*) FROM parol WHERE id_admin = ?", (user_id,))
    count = cursor.fetchone()[0]
    connection.commit()
    connection.close()
    #–ü—Ä–∏ —Å–º–µ–Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–¥–∞–ª–∏—Ç—å —Å—Ç—Ä–æ—á–∫–∏: "if count >0:" ; "else: bot.send_message(user_id, "–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")"
    if count >0:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏", callback_data="change_parol_teacher"))
        markup.add(types.InlineKeyboardButton("–°—Ç—É–¥–µ–Ω—Ç—ã", callback_data="change_parol_student"))
        bot.send_message(user_id, "–î–ª—è –∫–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å? ", reply_markup=markup)
    else:
        bot.send_message(user_id, "–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")

def change_parol_teacher (message, user_id):
    new_parol = message.text
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    #–ü–†–ò –°–ú–ï–ù–ï –ê–î–ú–ò–ù–ê –î–û–ë–ê–í–ò–¢–¨ –°–¢–†–û–ß–ö–ò:
    #cursor.execute('INSERT INTO parol (id_admin) VALUES (?)',
    #               (user_id,))
    cursor.execute("""UPDATE parol 
                            SET parol_for_teacher = ?
                            WHERE id_admin = ?
                        """, (new_parol, user_id))
    bot.send_message(user_id, "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    connection.commit()
    connection.close()

def change_parol_student(message, user_id):
    new_parol = message.text
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("""UPDATE parol 
                            SET parol_for_student = ?
                            WHERE id_admin = ?
                        """, (new_parol, user_id))
    bot.send_message(user_id, "–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    connection.commit()
    connection.close()

@bot.message_handler(commands=['manual'])
def settings(message):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (message.chat.id,))
    teacher = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (message.chat.id,))
    student = cursor.fetchone()[0]
    # –ü–†–û–í–ï–†–ö–ê –ó–ê–†–ï–ì-–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ò–õ–ò –ù–ï–¢
    if student > 0 and teacher == 0:
        bot.send_message(message.chat.id, f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¢–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞.\n\n1. –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start –∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ß—Ç–æ–±—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é "
                                          f"–Ω–µ–æ–±—Ö–æ–¥–∏–º –∫–æ–¥-–ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–æ–±—â–∏—Ç—å –≤–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ö–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–π —Ä–æ–ª–∏ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ "
                                          f"–≤–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –ø—É—Ç–∏ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª-¬´–ü–æ–º–µ–Ω—è—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ¬ª"
                                          f"\n\n2. –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –ø—É—Ç–∏ ¬´–ú–æ–∏ –∑–∞–¥–∞—á–∏¬ª-¬´–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ¬ª, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ. –¢–∞–∫ –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–µ –∑–∞–±—ã—Ç—å –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö –∏ –¥–µ–ª–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ¬´–í—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã¬ª –Ω–∞ 16:00 (–≤—Ä–µ–º—è) 01.12 (–¥–∞—Ç–∞), –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –≤–∞–º –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è 1 —Ä–∞–∑ —Å –∫–Ω–æ–ø–∫–∞–º–∏ ¬´–≤—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª –∏ ¬´–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª- –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏."
                                          f"\n\n3. –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —Ç–æ–º—É –∂–µ –ø—Ä–∏–Ω—Ü–µ–ø—É, —á—Ç–æ –∏ –æ–±—ã—á–Ω–æ–µ, –Ω–æ –∏–º–µ–µ—Ç –æ–¥–Ω–æ –æ—Ç–ª–∏—á–∏–µ- —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—É–¥–µ—Ç –ø—Ä–∏—Å—ã–ª–∞—Ç—å—Å—è –≤–∞–º –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —É–∫–∞–∑–∞–ª–∏. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã —Å–æ–∑–¥–∞—ë—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ¬´–í—ã–ø–∏—Ç—å —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã¬ª –Ω–∞ 16:00 (–≤—Ä–µ–º—è) 01.12 (–¥–∞—Ç–∞), —Ç–æ –Ω–∞—á–∏–Ω–∞—è —Å 01.12 –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å–≤ 16:00 "
                                          f"\n\n4. –í—Å–µ –∑–∞–¥–∞—á–∏\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –ø—É—Ç–∏ ¬´–ú–æ–∏ –∑–∞–¥–∞—á–∏¬ª-¬´–í—Å–µ –º–æ–∏ –∑–∞–¥–∞—á–∏¬ª –∏ –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –≤–∞–º –≤—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∏ –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–æ–∑–¥–∞–≤–∞–ª–∏. –¢–∞–∫–∂–µ –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –≤–∞–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –µ—Å–ª–∏ —Ç–∞–∫–∏–µ –∏–º–µ—é—Ç—Å—è."
                                          f"\n\n5. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–π–¥–µ—Ç–µ –ø–æ –ø—É—Ç–∏ ¬´–ú–æ–∏ –∑–∞–¥–∞—á–∏¬ª-¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é¬ª. –¢–∞–º –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞). –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç, –æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é. –î–∞–ª–µ–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –æ—Ü–µ–Ω–∏—Ç—å –≤–∞—à—É —Ä–∞–±–æ—Ç—É –∏ –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞–º —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ —Å –æ—Ü–µ–Ω–∫–æ–π. "
                                          f"\n\n6. –£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ \n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –ø—É—Ç–∏ ¬´–ú–æ–∏ –∑–∞–¥–∞—á–∏¬ª-¬´–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ¬ª –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."
                                          f"\n\n7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n–í—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –≤–≤–µ–¥—ë—Ç–µ –∫–æ–º–∞–Ω–¥—É /statistics. –í–∞–º –ø—Ä–∏–¥—ë—Ç –∫—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–π –±—É–¥—É—Ç –æ—Ç—Ä–∞–∂–µ–Ω—ã –≤—ã–ø–ª–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –∑–∞–¥–∞—á–∏. "
                                          f"\n\n8. –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –ø—É—Ç–∏ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª-¬´–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç¬ª –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º –≤–∞–º –ø—Ä–∏–π–¥–µ—Ç—Å—è —Å–Ω–æ–≤–∞ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã."
                                          f"\n\n9. –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n–ï—Å–ª–∏ –±–æ—Ç –≤–∞–º –≤—ã–¥–∞—ë—Ç –æ—à–∏–±–∫—É –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–π–¥—ë—Ç–µ –ø–æ–ø –ø—É—Ç–∏ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª-¬´–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É¬ª"
                                           )

    elif student == 0 and teacher > 0:
        bot.send_message(message.chat.id, f"–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –¢–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Ç–∞.\n\n1. –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start –∏ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ß—Ç–æ–±—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é "
                                          f"–Ω–µ–æ–±—Ö–æ–¥–∏–º –∫–æ–¥-–ø–∞—Ä–æ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç —Å–æ–æ–±—â–∏—Ç—å –≤–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ö–æ–¥ –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–π —Ä–æ–ª–∏ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ "
                                          f"–≤–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –ø—É—Ç–∏ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª-¬´–ü–æ–º–µ–Ω—è—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ¬ª"
                                          f"\n\n2. –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ –≥—Ä—É–ø–ø—ã\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /settings –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ ¬´–º–µ–Ω—é¬ª –∏ –≤—ã–±–µ—Ä–∏—Ç–µ ¬´–Ω–∞—Å—Ç—Ä–æ–π–∫–∏¬ª. –ß—Ç–æ–±—ã –≤—ã —Å–º–æ–≥–ª–∏ "
                                          f"–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É, –≤ –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç—É–¥–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –Ω–∞–∂–º–∏—Ç–µ "
                                          f"¬´—Å–æ–∑–¥–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É¬ª. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –Ω–∞–∂–º–∏—Ç–µ ¬´–î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É¬ª. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –ø–µ—Ä–µ–π–¥–µ—Ç–µ –ø–æ –ø—É—Ç–∏ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª-¬´–≤—Å–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã¬ª-¬´–∏–∑–º–µ–Ω–∏—Ç—å "
                                          f"–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ¬ª, –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª-¬´–≤—Å–µ –≥—Ä—É–ø–ø—ã¬ª-¬´–∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É¬ª, –¥–ª—è –≥—Ä—É–ø–ø—ã.\n\n"
                                          f"3. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞–Ω–∏—è\n–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Å—Ç—É–¥–µ–Ω—Ç–∞–º –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –ø—É—Ç–∏ ¬´–ú–æ–∏ –∑–∞–¥–∞—á–∏¬ª-¬´–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É¬ª, –ø–æ—Å–ª–µ —á–µ–≥–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ "
                                          f"–∑–∞–¥–∞—á–∞. –ó–∞–¥–∞—á–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞–∂–¥–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É –≥—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –Ω–µ–π. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª —Å –≤–∞—à–∏–º –∑–∞–¥–∞–Ω–∏–µ–º (–î–æ–∫—É–º–µ–Ω—Ç –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞) –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ "
                                          f"–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º, –∏ –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ.\n\n"
                                          f"4. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ\n–ß—Ç–æ–±—ã –æ—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å—Ç—É–¥–µ–Ω—Ç—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –ø—É—Ç–∏ ¬´–ú–æ–∏ –∑–∞–¥–∞—á–∏¬ª-¬´–û—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É¬ª. –î–∞–ª–µ–µ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ä–µ—à–µ–Ω–∏—è –æ—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É, –∏ –≤–≤–µ–¥–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –∏ –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ä–∞–±–æ—Ç–µ. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç—É, –∏ –æ—Ü–µ–Ω–∫–∞ –±—É–¥–µ—Ç –æ—Ç—Ä–∞–∂–µ–Ω–∞ –≤ –æ—Ç—á—ë—Ç–Ω–æ–º –¥–æ–∫—É–º–µ–Ω—Ç–µ. –í—ã —Å–º–æ–∂–µ—Ç–µ —ç—Ç–æ —É–≤–∏–¥–µ—Ç—å –≤ –æ—Ç–¥–µ–ª–µ ¬´–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞¬ª."
                                          f"\n\n5. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–Ω–µ—Å—Ç–∏ –¥–æ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≥—Ä—É–ø–ø—ã, —Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –µ—ë –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—Å–ª–∏ –ø–µ—Ä–µ–π–¥–µ—Ç–µ –ø–æ –ø—É—Ç–∏ ¬´–ú–æ–∏ –∑–∞–¥–∞—á–∏¬ª-¬´–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º¬ª. –¢–∞–º –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –î–∞–ª–µ–µ –≤—ã –≤–≤–æ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫ –ø—Ä–∏–º–µ—Ä—É, ¬´–î–æ—Ä–æ–≥–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—ã, –∑–∞—á–µ—Ç –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∑–∞–≤—Ç—Ä–∞ –≤ 10:00 –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ 256.¬ª, –æ–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º. "
                                          f"\n\n6. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö\n–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–æ—á—Ç—É —Å—Ç—É–¥–µ–Ω—Ç–∞, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∏–º –Ω–∞–ø—Ä—è–º—É—é. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –ø—É—Ç–∏ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª-¬´–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö¬ª. –í–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑—ã–≤–∞–ª —Å—Ç—É–¥–µ–Ω—Ç –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                                          f"\n\n7. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n–í—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –µ—Å–ª–∏ –≤–≤–µ–¥—ë—Ç–µ –∫–æ–º–∞–Ω–¥—É /statistics. –ù–∞ –≤—ã–±–æ—Ä –±—É–¥–µ—Ç –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞: –≥–¥–µ 1 - –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á, –∏ 2 - –û—Ç—á—ë—Ç, –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞ word, –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫, –≥–¥–µ –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —Å—Ç—É–¥–µ–Ω—Ç—É –≥—Ä—É–ø–ø—ã, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç, –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ –∏ —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª. "
                                          f"\n\n8. –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –ø—É—Ç–∏ ¬´–ú–æ–∏ –∑–∞–¥–∞—á–∏¬ª-¬´–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É¬ª –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É. –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è, –æ–± —ç—Ç–æ–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º, –∫–æ—Ç–æ—Ä—ã–º —ç—Ç–∞ –∑–∞–¥–∞—á–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞."
                                          f"\n\n9. –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –ø—É—Ç–∏ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª-¬´–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç¬ª –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ. –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º –≤–∞–º –ø—Ä–∏–π–¥–µ—Ç—Å—è —Å–Ω–æ–≤–∞ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã."
                                          f"\n\n10. –û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n–ï—Å–ª–∏ –±–æ—Ç –≤–∞–º –≤—ã–¥–∞—ë—Ç –æ—à–∏–±–∫—É –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã–≤–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ, —Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–º–æ—â—å—é –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–π–¥—ë—Ç–µ –ø–æ–ø –ø—É—Ç–∏ ¬´–ù–∞—Å—Ç—Ä–æ–π–∫–∏¬ª-¬´–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É¬ª")

    elif student > 0 and teacher > 0:
        bot.send_message(message.chat.id,
                         f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.")
    elif student == 0 and teacher == 0:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
        bot.send_message(message.chat.id,
                         "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. ",
                         reply_markup=markup)
    connection.commit()
    connection.close()

@bot.message_handler(commands=['settings'])
def settings(message):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (message.chat.id,))
    teacher = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (message.chat.id,))
    student = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM parol WHERE id_admin = ?", (message.chat.id,))
    admin = cursor.fetchone()[0]
    # –ü–†–û–í–ï–†–ö–ê –ó–ê–†–ï–ì-–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ò–õ–ò –ù–ï–¢
    if student > 0 and teacher == 0:
        if admin > 0:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)", callback_data="change_parol"))
            markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
            markup.add(types.InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="changing_settings_student"))
            markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account"))
            markup.add(types.InlineKeyboardButton("–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", callback_data="text_for_admin"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup = markup)
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
            markup.add(types.InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="changing_settings_student"))
            markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account"))
            markup.add(types.InlineKeyboardButton("–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", callback_data="text_for_admin"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=markup)
    elif student == 0 and teacher > 0:
        if admin > 0:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä)", callback_data="change_parol"))
            markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
            markup.add(types.InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="changing_settings_teacher"))
            markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account"))
            markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É", callback_data="add"))
            markup.add(types.InlineKeyboardButton("–í—Å–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã", callback_data="all_discipline"))
            markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add_group"))
            markup.add(types.InlineKeyboardButton("–í—Å–µ –≥—Ä—É–ø–ø—ã", callback_data="all_grupp"))
            markup.add(types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö", callback_data="info_about_student"))
            markup.add(types.InlineKeyboardButton("–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", callback_data="text_for_admin"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=markup)
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
            markup.add(types.InlineKeyboardButton("–ü–æ–º–µ–Ω—è—Ç—å –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data="changing_settings_teacher"))
            markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç", callback_data="delete_account"))
            markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É", callback_data="add"))
            markup.add(types.InlineKeyboardButton("–í—Å–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã", callback_data="all_discipline"))
            markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add_group"))
            markup.add(types.InlineKeyboardButton("–í—Å–µ –≥—Ä—É–ø–ø—ã", callback_data="all_grupp"))
            markup.add(types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—É–¥–µ–Ω—Ç–∞—Ö", callback_data="info_about_student"))
            markup.add(types.InlineKeyboardButton("–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É", callback_data="text_for_admin"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=markup)
    elif student > 0 and teacher > 0:
        bot.send_message(message.chat.id,
                         f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.")
    elif student == 0 and teacher == 0:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
        bot.send_message(message.chat.id,
                         "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. ",
                         reply_markup=markup)
    connection.commit()
    connection.close()

@bot.message_handler(commands=['my_tasks'])
def settings(message):
    connection = sqlite3.connect('my_database.db')
    cursor = connection.cursor()
    cursor.execute("SELECT COUNT (*) FROM teachers WHERE teacher_id = ?", (message.chat.id,))
    teacher = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM student WHERE student_id = ?", (message.chat.id,))
    student = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT (*) FROM parol WHERE id_admin = ?", (message.chat.id,))
    admin = cursor.fetchone()[0]
    # –ü–†–û–í–ï–†–ö–ê –ó–ê–†–ï–ì-–ù –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ò–õ–ò –ù–ï–¢
    if student > 0 and teacher == 0:
        if admin > 0:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–û–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_text"))
            markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="add_task"))
            markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="add_regular_task"))
            markup.add(types.InlineKeyboardButton("–í—Å–µ –º–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="all_tasks"))
            markup.add(
                types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é", callback_data="task_from_the_teacher"))
            markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="delete_tasks"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=markup)
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="add_task"))
            markup.add(types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="add_regular_task"))
            markup.add(types.InlineKeyboardButton("–í—Å–µ –º–æ–∏ –∑–∞–¥–∞—á–∏", callback_data="all_tasks"))
            markup.add(types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é", callback_data="task_from_the_teacher"))
            markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", callback_data="delete_tasks"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=markup)
    elif student == 0 and teacher > 0:
        if admin >0:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–û–±—Ä–∞—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_text"))
            markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task"))
            markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É (—Å—Ç—É–¥–µ–Ω—Ç–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏)",
                                                  callback_data="delete_tasks"))
            markup.add(types.InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å—Ç—É–¥–µ–Ω—Ç–∞", callback_data="send_markk"))
            markup.add(
                types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º", callback_data="send_message_for_student"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=markup)
        else:
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", callback_data="add_task"))
            markup.add(types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É (—Å—Ç—É–¥–µ–Ω—Ç–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏)", callback_data="delete_tasks"))
            markup.add(types.InlineKeyboardButton("–û—Ü–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å—Ç—É–¥–µ–Ω—Ç–∞", callback_data="send_markk"))
            markup.add(types.InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞–º", callback_data="send_message_for_student"))
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É:", reply_markup=markup)
    elif student > 0 and teacher > 0:
        bot.send_message(message.chat.id,
                         f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∏ –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É.")
    elif student == 0 and teacher == 0:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="registration"))
        bot.send_message(message.chat.id,
                         "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. ",
                         reply_markup=markup)
    connection.commit()
    connection.close()
# –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ (–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å)
def send_message_ga(user_id, message):
    bot.send_message(chat_id=user_id, text=f"{message}")

# –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Æ (–°—Ç—É–¥–µ–Ω—Ç)
def send_message_ga_student(user_id, message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="done"))
    markup.add(types.InlineKeyboardButton("–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="dont_done"))
    bot.send_message(chat_id=user_id, text=f"–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï: {message}", reply_markup=markup)

# –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ô –ó–ê–î–ê–ß–ò –°–¢–£–î–ï–ù–¢–ê
def check_tasks():
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    now = datetime.now()
    current_time = now.strftime("%H:%M")
    current_date = now.strftime("%d.%m")
    # –í—ã–±–æ—Ä–∫–∞ –∑–∞–¥–∞—á —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –¥–∞—Ç–æ–π
    cursor.execute("""
        SELECT id, user_id, task, regular_task 
        FROM tasks 
        WHERE task_time = ? AND date = ?
    """, (current_time, current_date))
    tasks = cursor.fetchall()
    for task in tasks:
        task_id, user_id, message, regular_task = task
        send_message_ga_student(user_id, message)
        if regular_task == 1:
            next_day = now + timedelta(days=1)
            current_datee = next_day.strftime("%d.%m")
            cursor.execute("""
                            UPDATE tasks 
                            SET date = ?
                            WHERE id = ?
                        """, (current_datee, task_id))
            cursor.execute("""UPDATE tasks 
                            SET count_regular_task = count_regular_task + 1
                            WHERE id = ?
                        """, (task_id,))
            cursor.execute("""                
                            UPDATE statystic_for_student 
                            SET all_tasks = all_tasks + 1, 
                                dont_complete = dont_complete + 1
                            WHERE student_id = ?""", (user_id,))
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è, –æ–±–Ω–æ–≤–ª—è–µ–º complete –Ω–∞ True
        if not regular_task:
            cursor.execute("""
                UPDATE tasks 
                SET complete = 1 
                WHERE id = ?
            """, (task_id,))
            cursor.execute("""                
                UPDATE statystic_for_student 
                SET all_tasks = all_tasks + 1, 
                    dont_complete = dont_complete + 1
                WHERE student_id = ?""", (user_id,))

    conn.commit()
    conn.close()


# –û–¢–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ò –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø
def send_doc():
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    now = datetime.now()
    current_time = now.strftime("%H:%M")
    current_date = now.strftime("%d.%m")
    cursor.execute("""
            SELECT id, document, group_number, name_of_discipline, the_task_for_student, teacher_id, statys
            FROM task_for_student 
            WHERE send_time = ? AND send_date = ? """, (current_time, current_date))
    tasks = cursor.fetchall()
    for task in tasks:
        id, document, group_number, name_of_discipline, the_task_for_student, teacher_id, statys = task
        if not statys:
            cursor.execute("""
                UPDATE task_for_student 
                SET statys = 1 
                WHERE id = ?
            """, (id,))
            cursor.execute("""
                    SELECT student_id 
                    FROM student 
                    WHERE group_number = ? """, (group_number,))
            for_student = cursor.fetchall()
            for student in for_student:
                student_id = student[0]
                send_message_ga(student_id, f"{name_of_discipline}\n–ó–ê–î–ê–ù–ò–ï:\n{the_task_for_student}\n")
                bot.send_document(student_id, open(f"{document}", "rb"))
                cursor.execute("""
                                        SELECT name 
                                        FROM student 
                                        WHERE student_id = ? """, (student_id,))
                name_student = cursor.fetchall()
                for names in name_student:
                    student_name = names[0]
                    cursor.execute(
                        'INSERT INTO task_list (name_student, task_id, student_id, teacher_id, name_of_discipline, the_task_for_student, group_number, send_teacher_for_student_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?)',
                        (student_name, id, student_id, teacher_id, name_of_discipline, the_task_for_student, group_number, current_date))
            send_message_ga(teacher_id,
                            f"{name_of_discipline}\n–ó–∞–¥–∞—á–∞: {the_task_for_student}\n–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞–º –≥—Ä—É–ø–ø—ã {group_number}")
            cursor.execute("UPDATE task_for_student SET document = NULL WHERE id= ?", (id,))
        os.remove(f"{document}")
    conn.commit()
    conn.close()


# –û–¢–ü–†–ê–í–ö–ê –†–ï–®–ï–ù–Å–ù–ù–û–ì–û –ó–ê–î–ê–ù–ò–Ø –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Æ
def send_doc_for_teacher(file_name, current_time, current_date, tasks_id, student_id):
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    cursor.execute("""
        UPDATE task_list 
        SET complete = 1 
        WHERE document = ? AND task_time = ? AND date = ? AND id = ?
    """, (file_name, current_time, current_date, tasks_id))
    cursor.execute("""
            SELECT name 
            FROM student 
            WHERE student_id = ? """, (student_id,))
    name_student = cursor.fetchall()
    for name in name_student:
        student_name = name[0]
        cursor.execute("""
                    SELECT teacher_id, name_of_discipline, the_task_for_student, group_number
                    FROM task_list 
                    WHERE student_id = ? AND document = ? AND task_time = ? AND date = ? AND id = ? """, (student_id, file_name, current_time, current_date, tasks_id))
        name_te = cursor.fetchall()
        for n in name_te:
            teacher_id, name_of_discipline, the_task_for_student, group_number = n
            send_message_ga(teacher_id,
                            f"–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ‚Ññ{tasks_id}\n{name_of_discipline}\n–ó–ê–î–ê–ù–ò–ï:\n{the_task_for_student}\n–û—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞: {student_name} –≥—Ä—É–ø–ø–∞ {group_number} ")
            bot.send_document(teacher_id, open(f"{file_name}", "rb"))
            cursor.execute("UPDATE task_list SET name_student = ? WHERE student_id = ? AND document = ? AND task_time = ? AND date = ? AND id = ?", (student_name, student_id, file_name, current_time, current_date, tasks_id))
            send_message_ga(student_id,
                            f"{name_of_discipline}\n–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏: {the_task_for_student}\n –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")

    conn.commit()
    conn.close()
    os.remove(f"{file_name}")

def send_coment_teacher(current_date,current_time):
    conn = sqlite3.connect('my_database.db')
    cursor = conn.cursor()
    cursor.execute("""
            SELECT task_id, student_id, teacher_id, name_of_discipline, the_task_for_student, send_time, date, group_number, comment, mark
            FROM teacher_comment 
            WHERE send_time = ? AND date = ? """, (current_time, current_date))
    comments = cursor.fetchall()
    for comm in comments:
        task_id, student_id, teacher_id, name_of_discipline, the_task_for_student, send_time, date, group_number, comment, mark = comm
        cursor.execute("""
                SELECT name 
                FROM teachers 
                WHERE teacher_id = ? """, (teacher_id,))
        name_teacher = cursor.fetchall()
        for name in name_teacher:
            teacher_name = name[0]
            send_message_ga(student_id,
                            f"–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ü–†–ï–ü–û–î–ê–í–ê–¢–ï–õ–Ø:\n{teacher_name}\n–û—Ü–µ–Ω–∫–∞ {mark} –ø–æ ‚Ññ{task_id}\n{name_of_discipline}\n–ó–ê–î–ê–ù–ò–ï:\n{the_task_for_student}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment} ")
        send_message_ga(teacher_id,
                        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        cursor.execute("UPDATE task_list SET send_mark_date = ? WHERE task_id = ?", (current_date, task_id))
    conn.commit()
    conn.close()

def reset_tasks():
    try:
        conn = sqlite3.connect('my_database.db')
        cursor = conn.cursor()
        cursor.execute("DELETE FROM statystic_for_student")
        conn.commit()
        conn.close()
    except sqlite3.Error as e:
        print(f"An error occurred: {e}")

scheduler = BackgroundScheduler()
# –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ check_tasks –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
scheduler.add_job(check_tasks, 'interval', minutes=1)
scheduler.add_job(send_doc, 'interval', minutes=1)
scheduler.add_job(reset_tasks, 'cron', day=1, hour=0, minute=0)
scheduler.start()

bot.polling(none_stop=True)



